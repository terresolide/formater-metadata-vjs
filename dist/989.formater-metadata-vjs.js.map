{"version":3,"file":"989.formater-metadata-vjs.js","mappings":"2JAWA,MCXsL,EDWtL,CACA,4BACA,cAEA,OACA,KACA,YACA,cAEA,KACA,YACA,cAEA,MACA,YACA,cAEA,OACA,YACA,cAEA,SACA,YACA,eAGA,OACA,OADA,SACA,GACA,kBACA,EACA,QAJA,SAIA,GAEA,GAEA,QAlCA,WAmCA,yBACA,sBACA,4BACA,EACA,QAvCA,WAyCA,EACA,UA1CA,WA2CA,EACA,KA5CA,WA6CA,OACA,cACA,gBAGA,qBAGA,gBAEA,EACA,SACA,eADA,WAEA,iBACA,QACA,qCACA,mEAEA,EACA,kBARA,WASA,sBACA,kBACA,wBACA,gCACA,OACA,IAEA,GADA,kBACA,iBACA,eAWA,KAEA,oBACA,+BAEA,0CAYA,EACA,WA9CA,SA8CA,cACA,yCACA,0BACA,mBACA,oCACA,mCACA,qCACA,cACA,kBACA,MACA,uCACA,YACA,kDAGA,OAFA,4CACA,kBAGA,iBACA,GAEA,EACA,cAnEA,WAmEA,WACA,gCACA,uEACA,kBACA,MACA,mCACA,gCAEA,MACA,0CACA,oBAEA,EACA,eAhFA,SAgFA,GACA,eACA,SAKA,GAJA,8BACA,OACA,yCAEA,OACA,2BACA,GACA,mEAEA,CACA,YACA,eACA,wBACA,0CACA,8DACA,CACA,iBACA,kDAEA,aACA,yCAEA,cACA,EACA,kBA3GA,SA2GA,GACA,cACA,SACA,yCACA,OACA,yDAIA,sBAEA,EACA,cAvHA,SAuHA,GACA,SACA,KACA,OACA,wBACA,6BACA,oCACA,qBACA,kCACA,eACA,iBAEA,4DAGA,UACA,wCACA,4BACA,IACA,cACA,qBACA,kCACA,mCACA,iDAGA,mBACA,aACA,aACA,0DACA,0BACA,wCACA,EACA,gBAxJA,SAwJA,GACA,mBACA,qBACA,4BACA,eACA,4BACA,kCACA,uBACA,qBACA,iBACA,eAEA,aACA,8BAoBA,OAnBA,oBACA,eACA,mBACA,0CACA,oCACA,OAEA,SACA,aACA,oCACA,cAGA,WACA,sBACA,4BAEA,wCACA,qCACA,CACA,IE3OA,GAXgB,E,QAAA,GACd,GCRW,WAA+C,OAAOA,EAA5BC,KAAYC,MAAMF,IAAa,MACrE,GACqB,IDSpB,EACA,KACA,KACA,MAI8B,O","sources":["webpack://formater-metadata-vjs/src/components/formater-sensorthings.vue","webpack://formater-metadata-vjs/./src/components/formater-sensorthings.vue?8a8f","webpack://formater-metadata-vjs/./src/components/formater-sensorthings.vue?b18e","webpack://formater-metadata-vjs/./src/components/formater-sensorthings.vue"],"sourcesContent":["/**\n * Tools to search with a SensorThings Api\n * \n * @author epointal\n *\n **/\n \n<template>\n</template>\n<script>\n\nexport default {\n  name: 'FormaterSensorthings',\n  components: {\n  },\n  props: {\n    url: {\n      type: String,\n      default: null\n    },\n    cds: {\n      type: String,\n      default: null\n    },\n    uuid: {\n      type: String,\n      default: null\n    },\n    depth: {\n      type: Number,\n      default: null\n    },\n    service: {\n      type: Object,\n      default: null\n    }\n  },\n  watch: {\n    $route (newvalue) {\n      this.getRecords(newvalue)\n    },\n    service (newvalue) {\n      \n    }\n  },\n  created () {\n    this.extractParameters()\n    this.initParameters()\n    this.getRecords(this.$route)\n  },\n  mounted () {\n\n  },\n  destroyed () {\n  },\n  data () {\n    return {\n      parameters: {},\n      fixedFilters: [],\n      // associative array of: parameter name in this application => name in the SensorThings api\n      // for the predefined parameters like box, temporalExtent, and paging (common for all api)\n      mappingParameters: [],\n      // list of others specific opensearch api parameters \n      // { name, title, pattern, min, max, options}\n      osParameters: []\n    }\n  },\n  methods: {\n    initParameters () {\n      this.parameters = {\n        $skip: 0,\n        $top: this.$store.state.size.nbRecord,\n        $expand: 'Thing($expand=Locations($top=1)),Sensor,ObservedProperty'\n      }\n    }, \n     extractParameters () {\n          console.log(this.url)\n          this.api = this.url\n          var url = new URL(this.url)\n          var filterParams = url.searchParams.get('$filter')\n          var filters = null\n          if (filterParams) {\n             filters = filterParams.split('and')\n             filters = filters.map(fl => {\n               return fl.trim()\n               var tab = fl.split(/\\s+/)\n               if (tab.length === 3) {\n\t               return {\n\t                 prop: tab[0],\n\t                 compare: tab[1],\n\t                 value: tab[2]\n\t               }\n               } else {\n                 return fl\n               }\n             })\n          }\n          this.fixedFilters = filters\n          console.log(this.fixedFilters)\n          \n          this.api = url.protocol + '//' + url.host + url.pathname \n//        var tab = describe.split('?')\n//        var fixedParameters = {}\n//        if (tab.length > 1) {\n//          var params = tab[1].split('&')\n//          params.forEach(function (param) {\n//            var x = param.split('=')\n//            fixedParameters[x[0]] = x[1]\n//          })\n//        }\n//        this.fixedParameters = fixedParameters\n//        return tab[0]\n     },\n     getRecords(route) {\n       this.$store.commit('searchingChange', true)\n       this.prepareParameters(route)\n       var url = this.api + '?'\n       var parameters = Object.assign({}, this.parameters)\n       url += Object.keys(parameters).map(function (prop) {\n        return prop + '=' + encodeURIComponent(parameters[prop])\n      }).join('&');\n       this.$http.get(url )\n       .then(\n           response => { this.treatmentJson(response.body)},\n           response => { \n             if (response.status === 403 || response.status === 401 || response.status === 400) {\n               console.log('CAN NOT GET ' + this.describe)\n               this.$emit('failed')\n               return\n             }\n             this.loadWithProxy()\n           }\n        )\n    },\n    loadWithProxy() {\n      if (this.$store.state.proxy.url) {\n\t      var url = this.$store.state.proxy.url + '?url=' + encodeURIComponent(this.api)\n\t      this.$http.get(url)\n\t      .then(\n\t          response => { console.log(response.body);},\n\t          response => { this.$emit('failed');}\n\t       )\n      } else {\n        console.log('CAN NOT GET ' + this.describe)\n        this.$emit('failed')\n      }\n    },\n    prepareFilters (query) {\n      console.log(query)\n      var filters = []\n      filters = filters.concat(this.fixedFilters)\n      if (query.any) {\n        filters.push(\"substringof('\" + query.any + \"', name)\")\n      }\n      if (query.box) {\n        var polygon = this.$box2sql(query.box)\n        if (polygon) {\n          filters.push(\"geo.intersects(Thing/Locations/location,geography'\" + polygon + \"')\")\n        }\n      }\n      if (query.start) {\n        var now = new Date()\n        console.log(now.toJSON())\n        var end = query.end ? query.end + 'T23:59:00Z' : now.toJSON()\n        filters.push('overlaps(phenomenonTime,' + query.start + 'T00:00:00Z/' + end + ')')\n      }\n      if (query.end && !query.start) {\n        filters.push('date(phenomenonTime) le date(' + query.end + ')')\n      }\n      if (filters.length > 0) {\n        this.parameters.$filter = filters.join(' and ')\n      } \n      console.log(filters)\n    },\n    prepareParameters (newvalue) {\n      var query = newvalue.query\n      if (query.from) {\n        this.parameters.$skip = parseInt(query.from) - 1\n        if (query.to) {\n          this.parameters.$top = parseInt(query.to) - parseInt(query.from) + 1\n        }\n      }\n      \n      this.prepareFilters(query)\n      \n    },\n    treatmentJson (data) {\n      var metadatas = {}\n      var features = []\n      var self = this\n      var contents = { type: 'sensorthings'}\n      data.value.forEach(function (value) {\n        var feature = value.Thing.Locations[0].location\n        feature.id = value['@iot.id'] + ''\n        feature.title = value.Thing.Locations[0].name\n        if (!feature.properties) {\n          feature.properties = {}\n        }\n        feature.properties = Object.assign(feature.properties, value.Thing.properties)\n       // feature.properties.title = value.Thing.name\n       // feature.properties.id = value['@iot.id'] + ''\n        features.push(feature)\n        metadatas[value['@iot.id'] + ''] = self.mapToGeonetwork(value)\n        metadatas[value['@iot.id'] + ''].feature = feature\n      })\n      contents.properties = {\n        count: data.value.length,\n        itemsPerPage: this.parameters.$top,\n        startIndex: this.parameters.$skip + 1,\n        next: data['@iot.nextLink'] ? data['@iot.nextLink'] : null\n      }\n      \n      contents.depth = this.depth\n      contents.features = features\n      contents.metadata = metadatas\n      var event = new CustomEvent('fmt:metadataListEvent', {detail: contents })\n      document.dispatchEvent(event)\n      this.$store.commit('searchingChange', false)\n    },\n    mapToGeonetwork (value) {\n      var properties = value.properties\n      properties.id = value['@iot.id'] + ''\n      properties.metaId = value['@iot.selfLink']\n      properties.title = value.name\n      properties.description = value.description\n      var temp = value.phenomenonTime.split('/')\n      properties.tempExtentBegin = temp[0]\n      properties.tempExtentEnd = temp[1]\n      properties.type = 'dataset'\n      properties.cds = this.cds\n     // properties.networks = value.Thing.properties.networks\n      properties.keyword = []\n      var time = value.resultTime.split('/')\n      properties.creationDate = time[0]\n      properties.updated = time[1]\n      if (value.properties.img) {\n        properties.images = [['Browse', value.properties.img, '']]\n        properties.thumbnail = value.properties.img\n        delete properties.img\n      }\n      if (properties.file) {\n        properties.download = [{\n          mimeType: 'application/octet-stream',\n          url: properties.file\n        }]\n      }\n      if (value.Sensor) {\n        console.log(value.Sensor)\n        properties.sensor = value.Sensor.metadata\n      }\n      properties.exportLinks= {json: value['@iot.selfLink']}\n      properties.contacts = {metadata: {}, resource: {}}\n      return properties\n    }\n   \n  }\n}\n\n</script>\n\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-sensorthings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-sensorthings.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./formater-sensorthings.vue?vue&type=template&id=2a9f83a4&\"\nimport script from \"./formater-sensorthings.vue?vue&type=script&lang=js&\"\nexport * from \"./formater-sensorthings.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c(\"div\")\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"names":["_c","this","_self"],"sourceRoot":""}
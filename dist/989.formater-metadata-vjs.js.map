{"version":3,"file":"989.formater-metadata-vjs.js","mappings":"0GAAAA,EAAOC,QAAU,SAAUC,GACzBA,EAAUC,QAAQC,OAASF,EAAUC,QAAQC,QAAU,GACvDF,EAAUC,QAAQC,OAAOC,KAAK,uLACvBH,EAAUC,QAAQG,KAC3B,C,4DCcA,MClBgM,EDkBhM,CACA,sCACA,OACA,OACA,YACA,cAEA,OACA,YACA,YAGA,OACA,qBAIA,kBAEA,GAEA,gBACA,OACA,SACA,SACA,SACA,2CACA,qEAEA,SACA,cACA,cACA,wBACA,6BACA,4BACA,8BACA,yBACA,2BACA,2BAEA,mBACA,SACA,kBACA,eAEA,EACA,mBACA,+BACA,wFAGA,4BAEA,EACA,qBACA,EAGA,mBAEA,EACA,SACA,0BACA,iBACA,OACA,qCACA,SACA,qCAEA,+CACA,OACA,MACA,SACA,uBACA,CACA,4CAEA,UACA,+BAOA,EACA,uBAOA,yCAgBA,uBAGA,uBACA,kBACA,EAwBA,2BAIA,GAFA,sBAEA,qBACA,0DACA,iFACA,mCACA,MACA,sDA6BA,GA3BA,+BACA,eACA,+CAEA,aACA,gEAEA,gBAEA,+BACA,gCAMA,6BACA,wCACA,OACA,iCACA,sCACA,gCACA,wBAKA,aAEA,6BACA,cACA,wCACA,kBACA,UACA,aACA,qBACA,sBAEA,WACA,qBACA,yBAMA,CACA,gBACA,wCAGA,iBACA,gHACA,OAJA,qDACA,gBAKA,kCACA,oCAEA,uCACA,CAOA,aALA,aACA,8EACA,cAGA,EACA,cACA,iCACA,SAEA,EADA,+BACA,cACA,sBACA,iDACA,MACA,MACA,iDACA,iDAIA,mBACA,EACA,2CACA,iDACA,YACA,aACA,wBACA,eACA,mCAEA,aACA,qEACA,yBACA,GAEA,EACA,kCACA,UASA,kDANA,CACA,6BAKA,MACA,YACA,oBACA,kCACA,IACA,sCACA,EACA,6BACA,iBACA,OACA,mEACA,MACA,SACA,2EACA,MACA,SACA,4EACA,MACA,QACA,sDAEA,wCACA,EACA,qCACA,yEACA,6CADA,CAIA,2CACA,SACA,KACA,OACA,qBACA,mCACA,YACA,GACA,eACA,KACA,yBAEA,IACA,gBACA,0BAEA,WAEA,0CACA,IAEA,WACA,4BACA,iCACA,yBACA,cAGA,aACA,oBACA,YACA,yBACA,mBAEA,cACA,eACA,eACA,wCAtCA,CAuCA,EACA,6CACA,KACA,KAEA,aADA,KACA,EACA,wBACA,WACA,cAIA,aADA,wDACA,EACA,sCAEA,eACA,kBACA,oBACA,gBACA,uDACA,yBACA,GAGA,EACA,wBACA,WACA,kCACA,kBACA,yCACA,2HACA,qDACA,kBACA,SACA,GACA,GAEA,EACA,+BACA,WACA,kCACA,YACA,sBACA,uBACA,gDAEA,IACA,EADA,sBACA,uBACA,2BACA,GACA,cACA,8BACA,QACA,YACA,aAGA,mCAEA,YACA,eAEA,GADA,sBACA,IACA,yBAGA,yBAIA,GADA,qBACA,iBACA,wBACA,6BAEA,QAEA,iBACA,UACA,WACA,eACA,sBAEA,yBAIA,CACA,uBACA,UACA,UACA,wBACA,qBACA,oBACA,qBACA,iBACA,kCACA,WACA,MAdA,eACA,eACA,4BAcA,IAGA,EAIA,iBACA,kBAUA,GATA,yBACA,iBACA,qBACA,oCAEA,8BAGA,IACA,cACA,SACA,uBACA,mDACA,GACA,MAUA,EATA,qFACA,6CACA,iBACA,iBAIA,OAHA,aACA,cAEA,CACA,IACA,IAEA,aACA,IACA,IAjCA,IAmCA,GACA,EACA,mBACA,mBACA,0DACA,yBACA,I,wBEpe2N,Q,MAAA,GCO3N,IAAIC,GAAY,OACd,GCRW,WAA+C,OAAOC,EAA5BC,KAAYC,MAAMF,IAAa,MACtE,GACsB,IDSpB,EACA,KACA,KACA,MAMoB,mBAAX,GAAuB,EAAOD,GAEzC,QAAeA,EAAiB,O","sources":["webpack://formater-metadata-vjs/./src/components/formater-elasticsearch-requester.vue?ec63","webpack://formater-metadata-vjs/src/components/formater-elasticsearch-requester.vue","webpack://formater-metadata-vjs/./src/components/formater-elasticsearch-requester.vue?7e46","webpack://formater-metadata-vjs/./src/components/formater-elasticsearch-requester.vue?fdbd","webpack://formater-metadata-vjs/./src/components/formater-elasticsearch-requester.vue?10f1","webpack://formater-metadata-vjs/./src/components/formater-elasticsearch-requester.vue"],"sourcesContent":["module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"fr\":{\"SERVICE_UNAVAILABLE\":\"Le service est indisponible. Veuillez revenir plus tard!\"},\"en\":{\"SERVICE_UNAVAILABLE\":\"The service is unavailable. Please come back later!\"}}')\n  delete Component.options._Ctor\n}\n","/**\n * use geonetwork elasticsearch service \n\n * \n */\n<i18n>{\n  \"fr\": {\n    \"SERVICE_UNAVAILABLE\": \"Le service est indisponible. Veuillez revenir plus tard!\"\n  },\n  \"en\": {\n     \"SERVICE_UNAVAILABLE\": \"The service is unavailable. Please come back later!\"\n  }\n}\n</i18n>\n<template></template>\n<script>\n\n\nexport default {\n  name: 'FormaterElasticsearchRequester',\n  props: {\n    group: {\n      type: String,\n      default: null\n    },\n    depth: {\n      type: Number,\n      default:0\n    }\n  },\n  watch: {\n    $route (newroute, old) {\n      // if (newroute.name !== old.name) {\n      //   this.initAggregations()\n      // }\n      this.getRecords(newroute)\n      \n    }\n  },\n  data() {\n    return {\n      srv: null,\n      api: null,\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Accept-Language': this.$store.state.lang === 'fr' ? 'fre,eng': 'eng,fre'\n      },\n      first: true,\n      dimensions: [],\n      parameters: {},\n      changePageListener:null,\n      temporalChangedListener: null,\n      spatialChangedListener: null,\n      dimensionChangedListener: null,\n      textChangedListener: null,\n      selectChangedListener: null,\n      closeMetadataListener: null,\n      // listen a global reset event\n      resetListener: null,\n      facet: [],\n      type: 'geonetwork',\n      credentials: {}\n     }\n  },\n  created () {\n    if (this.$store.state.geonetwork) {\n       this.srv = this.$store.state.geonetwork +  'srv/api/search/records/_search?bucket=metadata'\n       // this.srv = this.$store.state.geonetwork +  'srv/fre/'\n    }\n    this.getRecords(this.$route)\n\n  },\n  destroyed () {\n//     document.removeEventListener('fmt:pageChangedEvent', this.pageChangedListener);\n\n  },\n  mounted () {\n\n  },\n  methods: {\n    initParameters () {\n          this.parameters = {\n          from: 0,\n          size: this.$store.state.size.nbRecord,\n          _source: {\n            includes: this.$store.state.includes\n          },\n          sort: [{changeDate: \"desc\"}, {popularity: \"desc\"}],\n          query: {\n            bool: {\n                filter: [{\n                    term: {isTemplate: 'n'}\n                },  {\n                    terms: {resourceType: ['dataset', 'series']}\n                }],\n                must_not: {\n                    exists: {field: 'parentUuid'}\n                }\n            }\n          }\n         }\n        \n       \n    }, \n    getRecords (event) {\n      \n//       if (this.$store.state.metadata && this.first) {\n//         this.first = false\n//         this.searchSimpleMetadata()\n//         return\n//       }\n      this.$store.commit('searchingChange', true)\n      // trigger search event like breadcrumb\n//       if (event.detail && typeof event.detail.depth == 'number') {\n//         var depth = event.detail.depth\n//       } else {\n//         var depth = this.depth\n//       }\n//       var e = new CustomEvent(\"aerisSearchEvent\", { detail: {depth: depth}});\n//       document.dispatchEvent(e);\n     \n//       if (e.detail.api) {\n//         this.api = e.detail.api\n//         delete e.detail.api\n//         this.type = 'opensearch'\n        \n //     } else {\n        this.type = 'geonetwork'\n//      }\n\n      this.prepareRequest(event)\n      this.requestApi(event)\n    },\n//     prepareRequest (e) {\n//       switch (this.type) {\n//       case 'geonetwork':\n//         this.prepareRequestGeonetwork(e)\n//         break;\n//       case 'opensearch':\n//         this.prepareRequestOpensearch(e)\n//         break\n//       }\n//     },\n    // createGeometry (bbox) {\n    //   var split = bbox.split(',')\n    //   var north = split[3]\n    //   var south = split[1]\n    //   var east = split[2]\n    //   var west = split[0]\n    //   var box = 'POLYGON((' + west + '+' + north + ','\n    //     box += east + '+' + north + ',';\n    //     box += east + '+' + south + ',';\n    //     box += west + '+' + south + ',';\n    //     box += west + '+' + north + '))';\n    //   return box;\n    // },\n    prepareRequest(route) {\n      \n      this.initParameters()\n      \n      if (route.name === 'Metadata') {\n        var aggregations = Object.assign(this.$store.state.aggregations.step2)\n       this.parameters.query.bool.filter.push({ term: {parentUuid: route.params.uuid}})\n       delete this.parameters.query.bool.must_not\n      } else {\n       var aggregations = Object.assign(this.$store.state.aggregations.step1)\n      }\n      this.parameters.aggregations = aggregations\n      if (route.query.from) {\n        this.parameters.from = parseInt(route.query.from) - 1\n      }\n      if (route.query.to) {\n        this.parameters.size = parseInt(route.query.to) - this.parameters.from\n      }\n      if (route.query.sortBy) {\n        // this.parameters.sort = [{changeDate: 'desc'}, {popularity: desc}]\n        if (route.query.sortBy === 'popularity') {\n          this.parameters.sort.reverse()\n        } \n        // else if (route.query.sortBy === 'title') {\n        //   this.parameters.sort.unshift({'resourceTitleObject.fre': {order: 'asc'}})\n        // }\n      }\n      if (route.query.start || route.query.end) {\n        this.parameters.query.bool.filter.push({\n          range: {\n           resourceTemporalExtentDateRange: {\n              from: route.query.start ? route.query.start : null,\n              to: route.query.end ? route.query.end : null,\n              format: 'yyyy-MM-dd'\n            }\n          }\n        })\n      }\n      if (route.query.box) {\n        \n        var tab = route.query.box.split(',')\n        if (tab.length === 4) {\n          this.parameters.query.bool.filter.push({\n            geo_bounding_box: {\n              location: {\n                bottom_left: {\n                  lat: parseFloat(tab[1]),\n                  lon: parseFloat(tab[0])\n                },\n                top_right: {\n                  lat: parseFloat(tab[3]),\n                  lon: parseFloat(tab[2])\n                }\n              }\n            }\n          })\n        }\n      }\n      if (route.query.any) {\n        var words = route.query.any.trim().split(/(\\s+)/)\n        words = words.filter(function (w) { return w.trim().length > 0;})\n        var any = words.join(' AND ')\n        var term = {query_string: {\n          fields: [\"resourceTitleObject.*\", \"resourceAbstractObject.*\", \"lineageObject.*\", \"tag\", \"uuid\", \"resourceIdentifier\"],\n          query: any\n        }}\n        if (!this.parameters.query.bool.must) {\n          this.parameters.query.bool.must = []\n        }\n        this.parameters.query.bool.must.push(term)\n      }\n     \n      if (this.group) {\n        this.parameters.query.bool.filter.push({term: {groupOwner: this.group }})\n        delete aggregations['groupOwner']\n      }\n      \n      for(var key in aggregations) {\n        if (route.query [key]) {\n          if (aggregations[key].meta.type === 'dimension') {\n            var terms = {}\n            var q = decodeURIComponent(route.query[key])\n            var values = q.split('+or+')\n            terms[aggregations[key].terms.field] = values\n            this.parameters.query.bool.filter.push({terms: terms})\n          } else {\n            var term = {}\n            term[aggregations[key].terms.field] = decodeURIComponent(route.query[key])\n            this.parameters.query.bool.filter.push({term: term})\n          }\n        }\n      }\n      this.aggregations = aggregations\n    },\n    searchSimpleMetadata() {\n      this.$http.get(this.$store.state.metadata).then(\n          response => {  \n            var data = response.body\n            var uuid = data['geonet:info'].uuid\n            console.log(data)\n            var meta = this.$gn.treatmentMetadata(data, uuid);\n            // var feature = self.$gn.extractBbox(data.geoBox, uuid)\n            meta.appRoot = true\n            var event = new CustomEvent('fmt:metadataEvent', {detail: {meta:meta, depth: 0 } })\n            document.dispatchEvent(event)\n         }\n        )\n    },\n    requestApi (route) {\n      if (!this.srv) {\n        return\n      }\n      var headers =  {\n          'Accept': 'application/json'\n       }\n\n      var self = this\n     \n      this.$http.post(this.srv, this.parameters, {headers: headers}).then(\n        response => { \n          console.log(response.body)\n          this.treatmentElasticsearch(response.body, 0)\n        },\n        response => { this.treatmentError(response, url); })\n    },\n    treatmentError (response, url) {\n      switch(response.status) {\n      case 0:\n        this.$store.commit('setError', this.$i18n.t('SERVICE_UNAVAILABLE'))\n        break;\n      case 403:\n        this.$store.commit('setError', 'SERVER RESPONSE FOR ' + url + ' : ACCESS DENIED')\n        break;\n      case 404:\n        this.$store.commit('setError', 'SERVER RESPONSE FOR ' + url + ' : PAGE NOT FOUND')\n        break;\n      default:\n        this.$store.commit('setError', 'UNKNOWN ERROR FOR ' + url)\n      }\n      this.$store.commit('searchingChange', false)\n    },\n    treatmentElasticsearch (data, depth) {\n       if (this.parameters.from === 0 && data.hits && data.hits.hits && data.hits.hits.length === 0) {\n        this.$store.commit('searchingChange', false)\n        return\n       }\n       this.treatmentAggregations(data.aggregations)\n       var metadatas = {}\n       var features = []\n       var self = this\n       if (data.hits && data.hits.hits) {\n         data.hits.hits.forEach( function (meta, index) {\n             var uuid = meta._id\n             var feature = {\n                type: 'Feature',\n                id: uuid,\n                geometry: meta._source.geom\n              }\n              if (feature) {\n                    if (feature.geometry[0]) {\n                      feature.geometry = feature.geometry[0]\n                    }\n                    features.push(feature)\n              }\n             metadatas[uuid] = self.$gn.treatmentMetaElasticsearch(meta ,uuid)\n           })\n       }\n       data.summary = {\n        from: this.parameters.from + 1,\n        to: this.parameters.from + features.length,\n        total: data.hits.total.value,\n        dimension: []\n       }\n       \n      data.metadata = metadatas\n      data.type = 'geonetwork'\n      data.features = {\n        type: 'FeatureCollection',\n        features: features\n      }\n      delete data.hits\n      delete data.aggregations\n      this.fill(data, depth)\n      this.$store.commit('searchingChange', false)\n    },\n    treatmentAggregations (aggs) {\n      var aggregations = []\n      var promises = []\n      var aggregations = []\n      for(var key in aggs) {\n        if (aggs[key].buckets.length > 0) {\n          aggs[key].key = key\n          aggregations.push(aggs[key]) \n        }\n      }\n      aggregations.sort(function (a,b) { return a.meta.sort - b.meta.sort})\n      for(var key in aggregations) {\n        promises.push(this.prepareAggregation(aggregations[key]))\n      }\n      Promise.all(promises)\n      .then((values) => {\n        var data = { dimension: values}\n        data.depth = this.depth\n        var event = new CustomEvent('fmt:dimensionEvent', {detail:  data})\n        document.dispatchEvent(event)\n      })\n\n    \n    },\n    translate(thesaurus, uris) {\n      var self = this\n      return new Promise(function (resolve, reject) {\n        var id = uris.join(',')\n        var lang = self.$store.state.lang === 'fr' ? 'fre' : 'eng'\n        var url = self.$store.state.geonetwork + 'srv/api/registries/vocabularies/keyword?id=' + encodeURIComponent(id) + '&thesaurus=' + thesaurus + '&lang=' + lang\n        self.$http.get(url, {headers: {'accept': 'application/json'}})\n        .then(resp => {\n          resolve(resp.body)\n        })\n      })\n      \n    },\n    prepareAggregation(agg) {\n      var self = this\n      return new Promise(function (resolve, reject) {\n        var label = agg.key\n        var lang = self.$store.state.lang\n        if (agg.meta && agg.meta.label) {\n          label = agg.meta.label[lang] ? agg.meta.label[lang] : agg.meta.label\n        }\n        var aggStore = self.aggregations[agg.key]\n        var tab = aggStore.terms.field.split('.')\n        var isKey = tab.length > 1 && tab[1] === 'key'\n        var aggregation = {\n          '@name': agg.key,\n          type: isKey ? 'associative' : 'simple',\n          label: label,\n          meta: agg.meta,\n          category: []\n        }\n        \n        var type = (agg.meta && agg.meta.type) || 'dimension'\n        \n        var buckets = agg.buckets\n        var gnGroups = self.$gn.groups\n        var lang = self.$store.state.lang\n        var toTranslate = []\n        var thesaurus = agg.meta.thesaurus || null\n      \n\n        buckets.forEach(function (item, index) {\n\n          // buckets[index].keys = keys\n          buckets[index]['@value'] = item.key\n          if (type === 'dimension') {\n            if (agg.key === 'groupOwner') {\n              var label = gnGroups[item.key].label[lang]\n            } else {\n              var label = item.key\n            }\n            aggregation.category.push({\n              '@name': label,\n              '@label': label,\n              '@value': item.key,\n              '@count': item.doc_count\n            })\n          } else if (type === 'select' && !isKey ) {\n            console.log(label)\n            console.log(item)\n            aggregation.category.push( item['@value'] )\n          } else {\n            var keys = item.key.split('^')\n            var uri = keys.pop()\n            toTranslate.push(uri)\n            buckets[index].parent = keys.join('^')\n            buckets[index].length = keys.length\n            buckets[index]['@name'] = item.key\n            buckets[index]['@label'] = item.key\n            buckets[index]['@value'] = uri\n            buckets[index]['@count'] = item.doc_count\n            delete item.doc_count\n          }\n          \n        })\n        // translate\n\n        if (!isKey) {\n          resolve(aggregation)\n          return\n        }\n        self.translate(thesaurus, toTranslate)\n        .then(translated => {\n          buckets.forEach(function (item, index) {\n            if (translated[item['@value']]) {\n              if (translated[item['@value']].label) {\n                buckets[index]['@label'] = translated[item['@value']].label\n              } else {\n                buckets[index]['@label'] = translated[item['@value']]\n              }\n            }\n          })\n          if (type === 'select') {\n            var category = []\n            buckets.forEach(function(item) {\n              category.push({ '@value': item['@value'], '@label': item['@label'] })\n            })\n          } else {\n            const arrayToTree = (arr, parent = '') =>\n            arr.filter(item => item.parent === parent)\n            .map(child => { \n              var category = arrayToTree(arr, child.key)\n              if (category.length > 0) {\n                child.category = category\n              }\n              return child\n            });\n            var category = arrayToTree(buckets)\n          }\n          aggregation.category = category\n          resolve(aggregation)\n        })\n        \n      })\n    },\n    fill (data, depth) {\n      data.depth = this.depth\n      var event = new CustomEvent('fmt:metadataListEvent', {detail:  data})\n      document.dispatchEvent(event)\n    }\n  }\n}\n</script>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-elasticsearch-requester.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-elasticsearch-requester.vue?vue&type=script&lang=js\"","import mod from \"-!../../node_modules/@intlify/vue-i18n-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-elasticsearch-requester.vue?vue&type=custom&index=0&blockType=i18n\"; export default mod; export * from \"-!../../node_modules/@intlify/vue-i18n-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-elasticsearch-requester.vue?vue&type=custom&index=0&blockType=i18n\"","import { render, staticRenderFns } from \"./formater-elasticsearch-requester.vue?vue&type=template&id=a25538dc\"\nimport script from \"./formater-elasticsearch-requester.vue?vue&type=script&lang=js\"\nexport * from \"./formater-elasticsearch-requester.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./formater-elasticsearch-requester.vue?vue&type=custom&index=0&blockType=i18n\"\nif (typeof block0 === 'function') block0(component)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c(\"div\")\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"names":["module","exports","Component","options","__i18n","push","_Ctor","component","_c","this","_self"],"sourceRoot":""}
{"version":3,"file":"858.formater-metadata-vjs.js","mappings":"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","sources":["webpack://formater-metadata-vjs/./src/modules/capabilities-reader.js"],"sourcesContent":["/**\n * getCapabilities Reader\n */\n\nconst reader = {\n    $http: null,\n    parser: null,\n    regex: null,\n    proxy: null,\n    init (http,  prox) {\n      $http = http\n      parser = new DOMParser()\n      if (prox) {\n        regex = new RegExp(prox.regex)\n      }\n      proxy = prox.url\n    },\n    loadInfo (layer, options, metaId, callback) {\n      var url = layer.href\n      if (regex.test(url) && proxy) {\n        search = proxy + '?url=' + encodeURIComponent(url)\n      }\n      $http.get(search)\n      .then(response => this.extract(response.body, layer, options, metaId, callback),\n            response => console.log('CAN NOT GET ' + url))\n    },\n    extract (str, layer, options, metaId, callback) {\n      var root = parser.parseFromString(str, 'text/xml')\n      var ns = root.children[0].getAttribute('xmlns')\n      var xlink = root.children[0].getAttribute('xmlns:xlink')\n      var nsResolver = function (prefix) {\n        switch(prefix) {\n          case 'xlink':\n            return xlink\n          default:\n            return ns\n        }\n      }\n\n      var urlGetMap = this.getUrlGetMap(root, nsResolver)\n      if (urlGetMap === '') {\n        return null\n      }\n      options.url = urlGetMap\n      var result = null\n      result = root.evaluate('//ns:Layer[ns:Name=\"' + layer.name + '\"]', root, nsResolver, XPathResult.ANY_TYPE, null)\n      if (result.resultType !== XPathResult.UNORDERED_NODE_ITERATOR_TYPE && result.resultType !== XPathResult.ORDERED_NODE_ITERATOR_TYPE) {\n        return null\n      }\n      var layerXml = result.iterateNext();\n      if (layerXml === null) {\n        return null\n      }\n      layer.href = urlGetMap\n     // layer.legend = this.getLegend(root, layerXml, nsResolver)\n      layer.title = this.getTitle(root, layerXml, nsResolver)\n      layer.options = {\n        id: layer.id,\n        ESPG: this.getESPG(root, layerXml, nsResolver),\n        format: this.getFormat(root, nsResolver),\n        opacity: options.opacity,\n        layers: layer.name,\n        legend: this.getLegend(root, layerXml, nsResolver)\n      }\n     // options.title = this.getTitle(root, layerXml, nsResolver)\n    //  options.legend = this.getLegend(root, layerXml, nsResolver)\n//      options.format = this.getFormat(root, nsResolver)\n//      options.ESPG = this.getESPG(root, layerXml, nsResolver)\n//      options.layers = layer.name\n//      options.id = layer.id\n      // search crs and legend and bbox\n      if (typeof callback !== 'undefined') {\n        callback(layer, metaId, options.zoom)\n      }\n    },\n    getUrlGetMap( root, resolver) {\n      var result = root.evaluate('//ns:Request/ns:GetMap/ns:DCPType/ns:HTTP/ns:Get/ns:OnlineResource/@xlink:href', root, resolver, XPathResult.STRING_TYPE, null)\n      return result.stringValue\n    },\n    getESPG (root, layerXml, resolver) {\n      // default leaflet CRS\n      var result = root.evaluate('count(./ns:CRS[text()=\"EPSG:3857\"])', layerXml, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n       return '3857'\n     }\n      var result = root.evaluate('count(./ns:CRS[text()=\"EPSG:4326\"])', layerXml, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return '4326'\n      }\n      var result = root.evaluate('count(./ns:CRS[text()=\"EPSG:3395\"])', layerXml, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return '3395'\n      } else {\n        return null\n      }\n    },\n    getFormat (root, resolver) {\n      var result = root.evaluate('count(//ns:Request/ns:GetMap[ns:Format=\"image/png\"])', root, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return 'image/png'\n      }\n      var result = root.evaluate('count(//ns:Request/ns:GetMap[ns:Format=\"image/jpeg\"])', root, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return 'image/jpeg'\n      }\n      return null\n    },\n    getTitle (root, layerXml, resolver) {\n      var result = root.evaluate('./ns:Title/text()', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      return result.stringValue\n    },\n    getAbstract (root, layerXml, resolver) {\n      var result = root.evaluate('./ns:Abstract/text()', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      return result.stringValue\n    },\n    getGeographicBoundingBox (root, layerXml, resolver) {\n      \n    },\n    getLegend (root, layerXml, resolver) {\n      var result = root.evaluate('./ns:Style/ns:LegendURL/ns:OnlineResource/@xlink:href', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      var src = result.stringValue\n      var result = root.evaluate('./ns:Style/ns:Title', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      var title = result.stringValue\n      if (src !== '') {\n        return {src: src, title: title}\n      } else {\n        return null\n      }\n      \n    }\n}\nmodule.exports = reader"],"names":["reader","$http","parser","regex","proxy","init","http","prox","DOMParser","RegExp","url","loadInfo","layer","options","metaId","callback","href","test","search","encodeURIComponent","get","then","response","extract","body","console","log","str","root","parseFromString","ns","children","getAttribute","xlink","nsResolver","prefix","urlGetMap","this","getUrlGetMap","result","evaluate","name","XPathResult","ANY_TYPE","resultType","UNORDERED_NODE_ITERATOR_TYPE","ORDERED_NODE_ITERATOR_TYPE","layerXml","iterateNext","title","getTitle","id","ESPG","getESPG","format","getFormat","opacity","layers","legend","getLegend","zoom","resolver","STRING_TYPE","stringValue","NUMBER_TYPE","numberValue","getAbstract","getGeographicBoundingBox","src","module","exports"],"sourceRoot":""}
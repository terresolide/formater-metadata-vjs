{"version":3,"sources":["webpack:///./src/components/formater-requester.vue?eac8","webpack:///./src/components/formater-requester.vue?a5ba","webpack:///src/components/formater-requester.vue","webpack:///./src/components/formater-requester.vue"],"names":["components_formater_requestervue_type_script_lang_js_","name","props","depth","type","Number","default","watch","$route","newroute","old","this","getRecords","data","srv","api","headers","Accept","Accept-Language","$store","state","lang","first","dimensions","parameters","changePageListener","temporalChangedListener","spatialChangedListener","dimensionChangedListener","textChangedListener","selectChangedListener","closeMetadataListener","resetListener","facet","credentials","created","geonetwork","$i18n","locale","destroyed","mounted","methods","initParameters","_content_type","fast","bucket","from","to","size","nbRecord","sortBy","orderBy","sortOrder","event","commit","prepareRequest","requestApi","createGeometry","bbox","split","north","south","east","west","box","route","resultType","summaryType","step2","parentUuid","params","uuid","isChild","step1","searchSimpleMetadata","_this2","$http","get","metadata","then","response","body","meta","$gn","treatmentMetadata","appRoot","CustomEvent","detail","document","dispatchEvent","_this3","Object","assign","query","renameProperty","geometry","self","gnParameters","forEach","key","group","_groupOwner","join","url","keys","map","prop","treatmentGeonetwork","treatmentError","status","treatmentGeojson","metadatas","features","feature","properties","id","mapToGeonetwork","push","length","description","fill","treatmentDimension","summary","dimension","extractBbox","geoBox","index","searchGnStep2Parameters","Array","isArray","find","findIndex","splice","_this4","step","addGnParameters","fromOs","productIdentifier","startDate","completionDate","updated","published","produced","quicklook","images","license","osParameters","mapping","services","browse","layers","flatsimLayer","layer","href","checked","download","exportLinks","links","i","json","xml","contacts","resource","organisationName","responsible","keywords","keyword","component","componentNormalizer","_h","$createElement","_self","_c","__webpack_exports__"],"mappings":"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","file":"12.formater-metadata-vjs.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-requester.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-requester.vue?vue&type=script&lang=js&\"","/**\n * use geonetwork q-search service \n * @see https://geonetwork-opensource.org/manuals/trunk/eng/users/api/q-search.html\n * \n * use opensearch api with extension geo, time, and eo\n * @see http://www.opensearch.org/Home\n * \n */\n \n<template></template>\n<script>\n\n\nexport default {\n  name: 'FormaterRequester',\n  props: {\n    depth: {\n      type: Number,\n      default:0\n    }\n  },\n  watch: {\n    $route (newroute, old) {\n      this.getRecords(newroute)\n      \n    }\n  },\n  data() {\n    return {\n      srv: null,\n      api: null,\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Accept-Language': this.$store.state.lang === 'fr' ? 'fre,eng': 'eng,fre'\n      },\n      first: true,\n      dimensions: [],\n      parameters: {},\n      changePageListener:null,\n      temporalChangedListener: null,\n      spatialChangedListener: null,\n      dimensionChangedListener: null,\n      textChangedListener: null,\n      selectChangedListener: null,\n      closeMetadataListener: null,\n      // listen a global reset event\n      resetListener: null,\n      facet: [],\n      type: 'geonetwork',\n      credentials: {}\n     }\n  },\n  created () {\n    if (this.$store.state.geonetwork) {\n       this.srv = this.$store.state.geonetwork +  'srv/' + (this.$i18n.locale === 'fr'? 'fre' : 'eng') + '/'\n       // this.srv = this.$store.state.geonetwork +  'srv/fre/'\n    }\n    this.getRecords(this.$route)\n    \n\n    // this.getRecords() done when <formater-paging> is mounted with its pageChangeEvent on order control change\n//     this.pageChangedListener = this.changePage.bind(this)\n//     document.addEventListener('fmt:pageChangedEvent', this.pageChangedListener);\n//     this.temporalChangedListener = this.getRecords.bind(this)\n//     document.addEventListener('temporalChangeEvent', this.temporalChangedListener);\n//     this.spatialChangedListener = this.getRecords.bind(this)\n//     document.addEventListener('fmt:spatialChangeEvent', this.spatialChangedListener);\n//     this.dimensionChangedListener = this.getRecords.bind(this);\n//     document.addEventListener('fmt:dimensionChangeEvent', this.dimensionChangedListener);\n//     this.textChangedListener = this.getRecords.bind(this);\n//     document.addEventListener('fmt:textChangeEvent', this.textChangedListener);\n//     this.selectChangedListener = this.getRecords.bind(this);\n//     document.addEventListener('fmt:selectChangeEvent', this.selectChangedListener)\n//      this.metadataWithChildListener = this.getRecords.bind(this)\n//     document.addEventListener('fmt:metadataWithChildEvent', this.metadataWithChildListener)\n//     this.closeMetadataListener = this.getRecords.bind(this)\n//      document.addEventListener('fmt:closeMetadataEvent', this.closeMetadataListener)\n//     this.resetListener = this.handleReset.bind(this);\n//      document.addEventListener('fmt:resetEvent', this.resetListener);\n  },\n  destroyed () {\n//     document.removeEventListener('fmt:pageChangedEvent', this.pageChangedListener);\n//     this.pageChangedListener = null;\n//     document.removeEventListener('temporalChangeEvent', this.temporalChangedListener);\n//     this.temporalChangedListener = null;\n//     document.removeEventListener('fmt:spatialChangeEvent', this.spatialChangedListener);\n//     this.spatialChangedListener = null;\n//     document.addEventListener('fmt:dimensionChangeEvent', this.dimensionChangedListener);\n//     this.dimensionChangedListener = null\n//     document.removeEventListener('fmt:textChangeEvent', this.textChangedListener)\n//     this.textChangedListener = null\n//     document.removeEventListener('fmt:selectChangeEvent', this.selectChangedListener)\n//     this.selectChangedListener = null\n//     document.removeEventListener('fmt:metadataWithChildEvent', this.metadataWithChildListener)\n//     this.metadataWithChildListener = null\n//      document.addEventListener('fmt:closeMetadataEvent', this.closeMetadataListener)\n//      this.closeMetadataListener = null\n//     document.addEventListener('fmt:resetEvent', this.resetListener);\n//     this.resetListener = null\n  },\n  mounted () {\n//     this.facet.facetFormaterFre = []\n//     this.facet.facetFormaterFre.push('https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fsolid_earth/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fgeothermal/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fgeothermal-geothermal_temperature')\n//     this.facet.facetFormaterFre.push( 'https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fsolid_earth/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fnon_solid/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fnon_solid-hydrogen_gas')\n   \n    // url=\"http://demo.formater/geonetwork/srv/fre/qi?_content_type=json&bucket=2365825987452666&fast=index&from=1&to=41\"\n  },\n  methods: {\n    initParameters () {\n        this.parameters = {\n          _content_type: 'json',\n           fast: 'index', // more quick\n        //  'facet.q': '',\n          bucket: 's101',\n          from: 1,\n          to: this.$store.state.size.nbRecord,\n          //  resultType: 'subtemplate',\n          // resultType: 'details',\n          sortBy: this.$store.state.orderBy,\n          sortOrder: 'ordering',\n          type:'dataset+or+series+or+publication'\n         }\n       \n    }, \n    getRecords (event) {\n      \n//       if (this.$store.state.metadata && this.first) {\n//         this.first = false\n//         this.searchSimpleMetadata()\n//         return\n//       }\n      this.$store.commit('searchingChange', true)\n      // trigger search event like breadcrumb\n//       if (event.detail && typeof event.detail.depth == 'number') {\n//         var depth = event.detail.depth\n//       } else {\n//         var depth = this.depth\n//       }\n//       var e = new CustomEvent(\"aerisSearchEvent\", { detail: {depth: depth}});\n//       document.dispatchEvent(e);\n     \n//       if (e.detail.api) {\n//         this.api = e.detail.api\n//         delete e.detail.api\n//         this.type = 'opensearch'\n        \n //     } else {\n        this.type = 'geonetwork'\n//      }\n\n      this.prepareRequest(event)\n      this.requestApi(event)\n    },\n//     prepareRequest (e) {\n//       switch (this.type) {\n//       case 'geonetwork':\n//         this.prepareRequestGeonetwork(e)\n//         break;\n//       case 'opensearch':\n//         this.prepareRequestOpensearch(e)\n//         break\n//       }\n//     },\n    createGeometry (bbox) {\n      var split = bbox.split(',')\n      var north = split[3]\n      var south = split[1]\n      var east = split[2]\n      var west = split[0]\n      var box = 'POLYGON((' + west + '+' + north + ','\n        box += east + '+' + north + ',';\n        box += east + '+' + south + ',';\n        box += west + '+' + south + ',';\n        box += west + '+' + north + '))';\n      return box;\n    },\n    prepareRequest(route) {\n      \n      this.initParameters()\n      \n      // delete e.detail.lang\n//       if (!e.detail.startDefault) {\n//         e.detail.renameProperty('start', 'extFrom')\n//       } else {\n//         delete e.detail.start\n//       }\n//       if (e.detail.endDefault) {\n//         delete e.detail.endDefault\n//         delete e.detail.end\n        \n//       } else {\n//         e.detail.renameProperty('end', 'extTo')\n//       }\n//       delete e.detail.startDefault\n//       delete e.detail.endDefault\n//       delete e.detail.box\n\n//      // delete e.detail.depth\n//       delete e.detail.recordPerPage\n     \n      if (route.name === 'Metadata') {\n       this.parameters.resultType = this.$store.state.summaryType.step2\n       this.parameters.parentUuid = route.params.uuid\n      } else {\n       this.parameters.isChild = false\n       this.parameters.resultType = this.$store.state.summaryType.step1\n      }\n//       if (e.detail.depth > 0) {\n//         // voir plutôt les key à éliminer centre de données, variable, instruments, gemet, types?\n//         for(var key in e.detail) {\n//           if (['any', 'geometry', 'extTo', 'extFrom', 'from', 'to', 'parentUuid', 'type'].indexOf(key) >=0){\n//             this.parameters[key] = e.detail[key]\n//           }\n//         }\n//       } else {\n        // this.prepareFacet(route)\n     \n        var _this = this\n\n    },\n//     prepareRequestOpensearch(e) {\n//       this.initParameters()\n//        if (e.detail.startDefault) {\n//         delete e.detail.start\n//       }\n//       if (e.detail.endDefault) {\n//         delete e.detail.end\n//       } \n//       this.mapParameters(e)\n//       this.parameters = Object.assign(this.parameters, e.detail)   \n\n//     },\n    searchSimpleMetadata() {\n      this.$http.get(this.$store.state.metadata).then(\n          response => {  \n            var data = response.body\n            var uuid = data['geonet:info'].uuid\n            var meta = this.$gn.treatmentMetadata(data, uuid);\n            // var feature = self.$gn.extractBbox(data.geoBox, uuid)\n            meta.appRoot = true\n            var event = new CustomEvent('fmt:metadataEvent', {detail: {meta:meta, depth: 0 } })\n            document.dispatchEvent(event)\n         }\n        )\n    },\n//     mapParameters(e) {\n//       // transform the name of parameter from this application to the opensearch api for the predefined parameter\n//       // or test if it is an opensearch parameter\n//       // paramaters specific to api opensearch\n//       var specificParameters = this.$store.state.parameters.others\n//       // parameters mapping with our app parameters\n//       var mappingParameters = this.$store.state.parameters.mapping\n//       for(var name in e.detail){\n        \n//         if (typeof mappingParameters[name] !== 'undefined') {\n//           e.detail.renameProperty(name, mappingParameters[name])\n//         } else  {\n//           var isSpecific = specificParameters.find(function (obj) {\n//             if (obj.name === name) {\n//               return true\n//             }\n//           })\n//           if (!isSpecific) {\n//             delete e.detail[name]\n//           }\n//         } \n//       }\n//     },\n//     requestApi (depth)  {\n//         switch (this.type) {\n//         case 'geonetwork':\n//           this.requestApiGeonetwork(depth)\n//           break;\n//         case 'opensearch':\n//           this.requestApiOpensearch(depth)\n//           break;\n//         }\n//     },\n    requestApi (route) {\n      if (!this.srv) {\n        return\n      }\n      // var depth = (typeof this.parameters.depth != 'undefined') ? this.parameters.depth : this.depth\n     \n     // delete this.parameters.depth\n      var headers =  {\n          'Accept': 'application/json, text/plain, */*',\n          'Accept-Language': this.$store.state.lang === 'fr' ? 'fre': 'eng'\n       }\n      this.parameters = Object.assign(this.parameters, route.query)\n      this.parameters.renameProperty('start', 'extFrom')\n      this.parameters.renameProperty('end', 'extTo')\n\n      if (this.parameters.box) {\n          this.parameters.geometry = this.createGeometry(this.parameters.box)\n          delete this.parameters.box\n      }\n      //first requête to type=me to record session and token\n//       this.$http.get('http://demo.formater/geonetwork/srv/fre/info?type=me', {credentials:true, headers: headers}).then(\n//           response => {console.log(response.headers)}\n//       )\n//       this.$http.get('http://demo.formater/geonetwork/srv/fre/info?type=me', {credentials:true, headers: headers}).then(\n//           response => {console.log(response.headers)}\n//       )\n      var self = this\n      // parameters according to depth\n      if (route.name === 'FormaterCatalogue') {\n     // if (depth === 0) {\n        // remove all parameters coming from step2 (normally there is not)\n        this.$store.state.gnParameters.step2.forEach(function (key) {\n          delete self.parameters[key]\n        })\n      }\n      if (route.name === 'Metadata') {\n     // if (depth > 0) {\n        // remove all parameters exlusivy reserve to step1\n        this.$store.state.gnParameters.step1.forEach(function (key) {\n          delete self.parameters[key]\n        })\n      }\n      \n      ['index', 'maxRecords', 'page'].forEach(function (key) {\n        delete self.parameters[key]\n      })\n    \n      if (this.parameters.sortBy === 'title') {\n        this.parameters.sortOrder = 'ordering'\n      } else {\n        delete this.parameters.sortOrder\n        // this.parameters.sortOrder = 'reverse'\n      }\n      if (route.name === 'FormaterCatalogue' && this.$store.state.group && !this.parameters._groupOwner) {\n        this.parameters._groupOwner = this.$store.state.group.join('+or+')\n      }\n      // this.$router.push({name: 'FormaterCatalogue', query:this.parameters})\n      // this.parameters.sortOrder =  this.parameters.sortBy === 'title' ? 'ordering': 'reverse';\n      var url = this.srv + 'q?' + Object.keys(this.parameters).map(function (prop) {\n        return prop + '=' + self.parameters[prop]\n      }).join('&');\n      this.$http.get(url, {headers: headers}).then(\n        response => { this.treatmentGeonetwork(response.body, 0);},\n        response => { this.treatmentError(response, url); })\n    },\n//     requestApiOpensearch (depth) {\n// \t\t  if (!this.api) {\n// \t\t    this.$store.commit('searchingChange', false)\n// \t\t    return\n// \t\t  }\n//       // var depth = (typeof this.parameters.depth != 'undefined') ? this.parameters.depth : this.depth\n//       var self = this\n//       var url = this.api + (this.api.indexOf('?') > 0 ? '&' :'?');\n//       // register parameters value\n//       url += Object.keys(this.parameters).map(function (prop) {\n//         return prop + '=' + self.parameters[prop]\n//       }).join('&');\n//       this.$emit('registerValues', {depth: depth, parameters: this.parameters})\n//      // this.$store.commit('addValueToParameters', this.parameters)\n//       this.$http.get(url).then(\n//           response => {   this.treatmentGeojson(response.body, depth);},\n//           response => { this.treatmentError(response, url); })\n//     },\n    treatmentError (response, url) {\n      switch(response.status) {\n      case 0:\n        this.$store.commit('setError', 'Maybe CORS ERROR, try with proxy')\n        break;\n      case 403:\n        this.$store.commit('setError', 'SERVER RESPONSE FOR ' + url + ' : ACCESS DENIED')\n        break;\n      case 404:\n        this.$store.commit('setError', 'SERVER RESPONSE FOR ' + url + ' : PAGE NOT FOUND')\n        break;\n      default:\n        this.$store.commit('setError', 'UNKNOWN ERROR FOR ' + url)\n      }\n      this.$store.commit('searchingChange', false)\n    },\n    treatmentGeojson (data, depth) {\n      var metadatas = {}\n      var self = this\n      var features = []\n      data.features.forEach( function (feature) {\n        feature.properties.id = feature.id\n        metadatas[feature.id] =  self.mapToGeonetwork(feature.properties)\n        features.push({type: feature.type, id: feature.id, geometry: feature.geometry})\n       \n      })\n      if (data.features.length === 0) {\n        metadatas = {}\n      }\n      if (data.properties) {\n        var properties = data.properties\n      } else {\n        var properties = data.description\n      }\n\n      this.fill({ type: 'opensearch', properties: data.properties, features: features, metadata:metadatas}, depth)\n      this.$store.commit('searchingChange', false)\n    },\n    treatmentGeonetwork (data, depth) {\n      var metadatas = {}\n      this.treatmentDimension(data.summary.dimension)\n      var features = []\n      var self = this\n      if (!data.metadata){\n        var metadatas = null\n      } else if (data.metadata && !data.metadata.forEach) {\n        var uuid = data.metadata['geonet:info'].uuid\n        metadatas[uuid] = self.$gn.treatmentMetadata(data.metadata ,uuid)\n        var feature = self.$gn.extractBbox(data.metadata.geoBox, uuid)\n        if (feature) {\n            features.push(feature)\n        }\n      } else {\n           data.metadata.forEach( function (meta, index) {\n             var uuid = meta['geonet:info'].uuid\n             metadatas[uuid] = self.$gn.treatmentMetadata(meta ,uuid)\n              var feature = self.$gn.extractBbox(meta.geoBox, uuid)\n              if (feature) {\n                    features.push(feature)\n              }\n           })\n      }\n      data.metadata = metadatas\n      data.type = 'geonetwork'\n      data.features = features\n      this.fill(data, depth)\n      this.$store.commit('searchingChange', false)\n      this.searchGnStep2Parameters(data.summary.dimension)\n      // this.searchRelated()\n    },\n    // remove groupOwner if only one group choose in app parameters\n    treatmentDimension (dimensions) {\n      if (this.$store.state.group.length === 1) {\n        if (!dimensions) {\n          dimensions = []\n        } else if (!Array.isArray(dimensions)) {\n          dimensions = [dimensions]\n        }\n        var find = dimensions.findIndex(function (dimension) {\n          return dimension['@name'] === 'groupOwner'\n        })\n        if (find >= 0) {\n          dimensions.splice(find, 1)\n        }\n      }\n    },\n    searchGnStep2Parameters (dimension) {\n      if (this.first) {\n        // register dimension in store\n        if (this.depth === 0) {\n          this.$store.commit('gnParametersChange', {step:1, dimension: dimension})\n        }\n        // this.$store.commit('gnParametersChange', {step:2, dimension:[]})\n        // search summary for all record (including child dataset) for step 2\n        if (this.$store.state.summaryType.step1 !== this.$store.state.summaryType.step2) {\n          \n          // var depth = (typeof this.parameters.depth != 'undefined') ? this.parameters.depth : this.depth\n          var headers =  {\n              'Accept': 'application/json, text/plain, */*',\n              'Accept-Language': this.$i18n.locale === 'fr' ? 'fre': 'eng'\n           }\n          var parameters = {\n              _content_type: 'json',\n              from:1,\n              to: 9,\n              type: 'dataset+or+series+or+publications',\n              resultType: this.$store.state.summaryType.step2\n          }\n          var url = this.srv + 'q?' + Object.keys(parameters).map(function (prop) {\n            return prop + '=' + parameters[prop]\n          }).join('&');\n          this.$http.get(url, {headers: headers}).then(\n            response => {  this.addGnParameters(response.body);}\n          )\n          this.first = false\n        }\n      }\n    },\n    addGnParameters(data) {\n      this.$store.commit('gnParametersChange', {step:2, dimension:data.summary.dimension})\n    },\n//     updateGeonetworkContacts (data) {\n//       data.responsibleParty.forEach( function (contact)  {\n//           var fields = contact.split('|');\n//           if (fields[1] === 'metadata' || fields[1] === 'metadonnées') {\n//            if (_this.contacts.metadata[fields[0]]){\n//              _this.contacts.metadata[fields[0]].push(fields)\n//            } else {\n//              _this.contacts.metadata[fields[0]] = [fields]\n//            }\n//           }else{\n//             if (_this.contacts.resource[fields[0]]){\n//                _this.contacts.resource[fields[0]].push(fields)\n//             } else {\n//                _this.contacts.resource[fields[0]] = [fields]\n//             }\n//           }\n                \n//       })\n//     },\n    mapToGeonetwork (properties) {\n      var properties = Object.assign({}, properties)\n      properties.fromOs = true\n      if (properties.productIdentifier) {\n        properties.renameProperty('productIdentifier', 'identifier')\n      }\n      if (properties.startDate) {\n        properties.renameProperty('startDate', 'tempExtentBegin')\n      }\n      if (properties.completionDate) {\n        properties.renameProperty('completionDate', 'tempExtentEnd')\n      }\n      if (properties.updated) {\n        properties.renameProperty('updated', 'revisionDate')\n      }\n      if (properties.published) {\n        properties.renameProperty('published', 'publicationDate')\n      }\n      if (properties.produced) {\n        properties.renameProperty('produced', 'creationDate')\n      }\n      if (!properties.type) {\n        properties.type = 'dataset'\n      }\n      if (properties.quicklook) {\n        properties.images = [['', properties.quicklook, '']]\n        delete properties.quicklook\n      }\n      if (properties.license) {\n       // properties.legalConstraints = [properties.license.licenseId]\n        delete properties.license\n      }\n      properties.osParameters = []\n      properties.mapping = []\n      if (properties.services) {\n        // @todo cas très très particulier de flatsim\n        if(properties.services.browse && properties.services.browse.layers) {\n          properties.layers = []\n          properties.services.browse.layers.forEach(function (flatsimLayer, index) {\n            var type =  flatsimLayer.type\n            var layer = {\n                id: properties.id + '_' + index,\n                name: flatsimLayer.name,\n                description:  flatsimLayer.name,\n                href: flatsimLayer.url,\n                type: flatsimLayer.type,\n                checked: false\n            }\n            properties.layers.push(layer)\n          })\n        }\n        if(properties.services.download && properties.services.download.url) {\n          if (!properties.download) {\n            properties.download = []\n          }\n          properties.download.push(properties.services.download)\n          \n        }\n        delete properties.services\n      }\n      if( !properties.exportLinks) {\n        properties.exportLinks = {}\n      }\n      // @todo Flatsim cas particulier des LIENS D'EXPORT qui se trouve dans link\n      if (properties.links) {\n        var i = properties.links.length\n        while (i--) {\n          if (properties.links[i].type === 'application/json' && !properties.exportLinks.json) {\n            properties.exportLinks.json = properties.links[i].href\n            properties.links.splice(i,1)\n          }\n          if (properties.links[i].type === 'application/xml' && !properties.exportLinks.xml) {\n            properties.exportLinks.xml = properties.links[i].href\n            properties.links.splice(i,1)\n          }\n        }\n        delete properties.links\n      }\n\n      if (!properties.contacts) {\n        properties.contacts = {metadata: {}, resource: {}}\n        if (properties.organisationName) {\n          if (typeof properties.organisationName === 'string') {\n            var responsible = new Array(10)\n            responsible[0] = 'Point of contact'\n            responsible[2] = properties.organisationName\n            properties.contacts.metadata['Point of contact'] = [responsible]\n            delete properties.organisationName\n          }\n        }\n      }\n     /* if (properties.keywords) {\n        properties.keywordGroup = {}\n        properties.keywords.forEach(function (keyword) {\n          if (!properties.keywordGroup[keyword.type]) {\n            properties.keywordGroup[keyword.type] = [{value: keyword.name}]\n          } else {\n            properties.keywordGroup[keyword.type].push({value: keyword.name})\n          }\n        })\n        delete properties.keywords\n      }*/\n      if (properties.keywords) {\n        properties.keyword = []\n        properties.keywords.forEach(function (keyword) {\n          properties.keyword.push(keyword.name)\n        })\n        delete properties.keywords\n      }\n      return properties\n    },\n    // @todo DEPLACER DANS FORM VOIR MÊME DANS formater-dimension-block/ formater-facet-block!!\n//     prepareFacet (e) {\n//       var facet = ''\n     \n//       for(var key in e.detail.facet) {\n//         if (e.detail.facet[key].length > 0) {\n//           if (facet === '') {\n//             facet = key +'/' + e.detail.facet[key]\n//           } else {\n//             facet += '&' + key + '/' + e.detail.facet[key]\n//           }\n//         }\n//       }\n//       if (facet !== '') {\n//        e.detail['facet.q'] = encodeURIComponent(facet)\n//        delete e.detail.facet\n//       }\n//       return e;\n//     },\n    fill (data, depth) {\n      data.depth = this.depth\n      var event = new CustomEvent('fmt:metadataListEvent', {detail:  data})\n      document.dispatchEvent(event)\n    },\n//     handleReset () {\n//       var event = new CustomEvent('aerisResetEvent', {detail: {}})\n//       document.dispatchEvent(event)\n//       this.getRecords({detail: {depth:event.detail.depth}})\n//     },\n//     changePage (event) {\n//       this.getRecords(event)\n//     },\n//     changeSearch (event) {\n//       this.parameters.any = event.target.value\n//       this.getRecords()\n//     }\n  }\n}\n</script>\n","import { render, staticRenderFns } from \"./formater-requester.vue?vue&type=template&id=7cd63dfd&\"\nimport script from \"./formater-requester.vue?vue&type=script&lang=js&\"\nexport * from \"./formater-requester.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}
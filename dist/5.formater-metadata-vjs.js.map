{"version":3,"sources":["webpack:///./node_modules/proj4/lib/global.js","webpack:///./node_modules/proj4/lib/constants/values.js","webpack:///./node_modules/proj4/lib/constants/PrimeMeridian.js","webpack:///./node_modules/proj4/lib/constants/units.js","webpack:///./node_modules/proj4/lib/match.js","webpack:///./node_modules/proj4/lib/projString.js","webpack:///./node_modules/wkt-parser/parser.js","webpack:///./node_modules/wkt-parser/process.js","webpack:///./node_modules/wkt-parser/index.js","webpack:///./node_modules/proj4/lib/defs.js","webpack:///./node_modules/proj4/lib/parseCode.js","webpack:///./node_modules/proj4/lib/extend.js","webpack:///./node_modules/proj4/lib/common/msfnz.js","webpack:///./node_modules/proj4/lib/common/sign.js","webpack:///./node_modules/proj4/lib/common/adjust_lon.js","webpack:///./node_modules/proj4/lib/common/tsfnz.js","webpack:///./node_modules/proj4/lib/common/phi2z.js","webpack:///./node_modules/proj4/lib/projections/longlat.js","webpack:///./node_modules/proj4/lib/projections.js","webpack:///./node_modules/proj4/lib/projections/merc.js","webpack:///./node_modules/proj4/lib/constants/Ellipsoid.js","webpack:///./node_modules/proj4/lib/constants/Datum.js","webpack:///./node_modules/proj4/lib/datum.js","webpack:///./node_modules/proj4/lib/Proj.js","webpack:///./node_modules/proj4/lib/deriveConstants.js","webpack:///./node_modules/proj4/lib/datumUtils.js","webpack:///./node_modules/proj4/lib/datum_transform.js","webpack:///./node_modules/proj4/lib/adjust_axis.js","webpack:///./node_modules/proj4/lib/common/toPoint.js","webpack:///./node_modules/proj4/lib/checkSanity.js","webpack:///./node_modules/proj4/lib/transform.js","webpack:///./node_modules/proj4/lib/core.js","webpack:///./node_modules/mgrs/mgrs.js","webpack:///./node_modules/proj4/lib/Point.js","webpack:///./node_modules/proj4/lib/common/pj_enfn.js","webpack:///./node_modules/proj4/lib/common/pj_mlfn.js","webpack:///./node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack:///./node_modules/proj4/lib/projections/tmerc.js","webpack:///./node_modules/proj4/lib/common/sinh.js","webpack:///./node_modules/proj4/lib/common/hypot.js","webpack:///./node_modules/proj4/lib/common/gatg.js","webpack:///./node_modules/proj4/lib/common/clens_cmplx.js","webpack:///./node_modules/proj4/lib/common/cosh.js","webpack:///./node_modules/proj4/lib/projections/etmerc.js","webpack:///./node_modules/proj4/lib/common/clens.js","webpack:///./node_modules/proj4/lib/common/asinhy.js","webpack:///./node_modules/proj4/lib/common/log1py.js","webpack:///./node_modules/proj4/lib/projections/utm.js","webpack:///./node_modules/proj4/lib/common/adjust_zone.js","webpack:///./node_modules/proj4/lib/common/srat.js","webpack:///./node_modules/proj4/lib/projections/gauss.js","webpack:///./node_modules/proj4/lib/projections/sterea.js","webpack:///./node_modules/proj4/lib/projections/stere.js","webpack:///./node_modules/proj4/lib/projections/somerc.js","webpack:///./node_modules/proj4/lib/projections/omerc.js","webpack:///./node_modules/proj4/lib/projections/lcc.js","webpack:///./node_modules/proj4/lib/projections/krovak.js","webpack:///./node_modules/proj4/lib/common/mlfn.js","webpack:///./node_modules/proj4/lib/common/e0fn.js","webpack:///./node_modules/proj4/lib/common/e1fn.js","webpack:///./node_modules/proj4/lib/common/e2fn.js","webpack:///./node_modules/proj4/lib/common/e3fn.js","webpack:///./node_modules/proj4/lib/common/gN.js","webpack:///./node_modules/proj4/lib/common/adjust_lat.js","webpack:///./node_modules/proj4/lib/common/imlfn.js","webpack:///./node_modules/proj4/lib/projections/cass.js","webpack:///./node_modules/proj4/lib/common/qsfnz.js","webpack:///./node_modules/proj4/lib/projections/laea.js","webpack:///./node_modules/proj4/lib/common/asinz.js","webpack:///./node_modules/proj4/lib/projections/aea.js","webpack:///./node_modules/proj4/lib/projections/gnom.js","webpack:///./node_modules/proj4/lib/projections/cea.js","webpack:///./node_modules/proj4/lib/common/iqsfnz.js","webpack:///./node_modules/proj4/lib/projections/eqc.js","webpack:///./node_modules/proj4/lib/projections/poly.js","webpack:///./node_modules/proj4/lib/projections/nzmg.js","webpack:///./node_modules/proj4/lib/projections/mill.js","webpack:///./node_modules/proj4/lib/projections/sinu.js","webpack:///./node_modules/proj4/lib/projections/moll.js","webpack:///./node_modules/proj4/lib/projections/eqdc.js","webpack:///./node_modules/proj4/lib/projections/vandg.js","webpack:///./node_modules/proj4/lib/projections/aeqd.js","webpack:///./node_modules/proj4/lib/projections/ortho.js","webpack:///./node_modules/proj4/lib/projections/qsc.js","webpack:///./node_modules/proj4/lib/projections/robin.js","webpack:///./node_modules/proj4/lib/projections/geocent.js","webpack:///./node_modules/proj4/lib/index.js","webpack:///./node_modules/proj4/projs.js"],"names":["SEC_TO_RAD","HALF_PI","Math","PI","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","PrimeMeridian_exports","greenwich","lisbon","paris","bogota","madrid","rome","bern","jakarta","ferro","brussels","stockholm","athens","oslo","units","ft","to_meter","us-ft","ignoredChar","match","obj","key","testkey","keys","Object","lkey","toLowerCase","replace","i","length","projString","defData","paramName","paramVal","paramOutname","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","unit","from_greenwich","pm","nadgrids","datumCode","axis","indexOf","substr","whitespace","latin","keyword","endThings","digets","Parser","text","Error","this","level","place","root","stack","currentObject","state","mapit","value","Array","isArray","unshift","thing","out","newObj","item","sExpr","shift","name","convert","prototype","readCharicter","char","test","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","output","d2r","input","wkt_parser","wkt","lisp","txt","parser","type","projName","local","PROJECTION","AXIS","axisOrder","ii","descriptor","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","slice","sphere","ellps","TOWGS84","isFinite","forEach","outName","inName","defs","that","arguments","def","charAt","apply","EPSG","ESRI","IAU2000","console","log","WGS84","GOOGLE","lib_defs","codeWords","codes","extend","destination","source","property","msfnz","eccent","sinphi","cosphi","con","sqrt","sign","x","adjust_lon","abs","tsfnz","phi","com","pow","tan","phi2z","ts","dphi","eccnth","atan","sin","identity","pt","projs","init","es","e","cos","forward","y","lon","lat","inverse","exp","names","projections_names","projStore","add","len","n","projections","start","get","Ellipsoid_exports","MERIT","ellipseName","SGS85","GRS80","IAU76","airy","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","Datum_exports","wgs84","ellipse","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","lib_datum","ep2","datum_type","Projection","srsCode","callback","error","json","code","some","auth","maybeProjStr","ext","parseCode","ourProj","datumDef","sphere_","ecc","a2","b2","datumObj","Proj","geodeticToGeocentric","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","X","Y","Z","atan2","checkParams","adjust_axis","crs","denorm","point","t","xin","yin","zin","toPoint","array","m","checkCoord","num","Number","TypeError","transform","dest","checkSanity","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","x_tmp","y_tmp","z_tmp","datum_transform","core_wgs84","transformer","from","to","coords","transformedArray","NaN","concat","splice","checkProj","oProj","core","fromProj","toProj","coord","single","mgrs","mgrs_forward","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","mgrs_toPoint","ll","accuracy","utm","seasting","easting","snorthing","northing","zoneNumber","zoneLetter","setParm","get100kSetForZone","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","String","fromCharCode","floor","N","T","C","A","LongOriginRad","ZoneNumber","Lat","Long","LatRad","degToRad","LongRad","UTMEasting","UTMNorthing","round","LetterDesignator","LLtoUTM","deg","radToDeg","rad","N1","T1","C1","R1","D","LongOrigin","mu","phi1Rad","e1","result","topRight","mgrsString","testChar","hunK","sb","substring","set","east100k","curCol","eastingValue","rewindMarker","north100k","curRow","northingValue","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","Point","warn","fromMGRS","mgrsStr","toMGRS","lib_Point","C08","pj_enfn","en","pj_mlfn","sphi","cphi","pj_inv_mlfn","arg","s","tmerc","ml0","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","tan_phi","d","ds","f","g","temp","h","asin","sinh","r","hypot","max","min","gatg","pp","B","cos_2B","h1","h2","clens_cmplx","arg_r","arg_i","hr2","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","j","hr","hi1","hr1","hi","etmerc","cgb","cbg","utg","gtu","np","Qn","Zb","clens","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","asinhy","tmp","adjust_zone","dependsOn","srat","esinp","gauss","rc","phic0","ratexp","K","sterea","sinc0","cosc0","R2","title","sinc","cosc","cosl","rho","stere","coslat0","sinlat0","isNaN","cons","ms1","X0","ssfn_","cosX0","sinX0","sinX","cosX","rh","sinlat","coslat","dlon","ce","Chi","phit","eccen","somerc","phy0","lambda0","sinPhy0","semiMajorAxis","flattening","e2","R","b0","k1","k2","k3","Sa1","Sa2","S","I","rotI","rotB","lambda","phy","prevPhy","iteration","omerc","no_off","no_rot","bl","fl","gl","t0","dl","t1","t2","el","hl","jl","pl","dlon12","dlon10","gamma0","uc","us","vs","ql","sl","tl","vl","ul","POSITIVE_INFINITY","qp","sp","tp","vp","up","lcc","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","rh1","theta","krovak","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","gfi","u","deltav","eps","ro","czech","fi1","ok","mlfn","e0","e3","e0fn","e1fn","e2fn","e3fn","gN","adjust_lat","imlfn","cass","lam","nl","asq","cl","dd","ml1","phi1","nl1","rl1","tl1","dsq","qsfnz","laea","mode","S_POLE","N_POLE","EQUIT","OBLIQ","mmf","apa","APA","rq","xmf","ymf","sinb1","cosb1","sinph0","cosph0","coslam","sinlam","q","sinb","cosb","cCe","sCe","ab","cosz","sinz","beta","asinz","aea","sin_po","cos_po","qs1","qs2","t3","qs0","ns0","qs","phi1z","eccnts","gnom","sin_p14","cos_p14","infinity_dist","coslon","cea","iqsfnz","eqc","dlat","poly","tanphi","mln","mlnp","ma","nzmg","B_re","B_im","C_re","C_im","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","z_n_im1","delta_x","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","mill","sinu","C_y","C_x","V","moll","delta_theta","eqdc","ml2","vandg","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","m1","th1","aeqd","sin_p12","cos_p12","Mlp","Ml","Nl1","Nl","psi","Az","G","H","GH","Hs","kp","cos_c","s2","s3","s4","cosAz","Ee","F","sinpsi","ortho","FACE_ENUM","AREA_ENUM","qsc_fwd_equat_face_theta","area","qsc_shift_lon_origin","offset","slon","qsc","face","one_minus_f","one_minus_f_squared","xy","sinlon","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","COEFS_X","COEFS_Y","poly3_val","coefs","robin","NODES","f_df","max_err","iters","upd","poly3_der","geocent","defaultDatum","version","proj4","__webpack_exports__"],"mappings":"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","file":"5.formater-metadata-vjs.js","sourcesContent":["export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = wkt.AXIS[i];\n      var descriptor = axis[0].toLowerCase();\n      if (descriptor.indexOf('north') !== -1) {\n        axisOrder += 'n';\n      } else if (descriptor.indexOf('south') !== -1) {\n        axisOrder += 's';\n      } else if (descriptor.indexOf('east') !== -1) {\n        axisOrder += 'e';\n      } else if (descriptor.indexOf('west') !== -1) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['false_easting', 'False_Easting'],\n    ['false_northing', 'False_Northing'],\n    ['central_meridian', 'Central_Meridian'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\n var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import {PJD_3PARAM, PJD_7PARAM, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n    case 'w':\n    case 'n':\n    case 's':\n      out[t] = v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function (coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (this.es === undefined || this.es <= 0) {\n    throw new Error('incorrect elliptical usage');\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {EPSLN, HALF_PI, FORTPI} from '../constants/values';\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {\n  this.no_off = this.no_off || false;\n  this.no_rot = this.no_rot || false;\n\n  if (isNaN(this.k0)) {\n    this.k0 = 1;\n  }\n  var sinlat = Math.sin(this.lat0);\n  var coslat = Math.cos(this.lat0);\n  var con = this.e * sinlat;\n\n  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n  var t0 = tsfnz(this.e, this.lat0, sinlat);\n  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n  if (dl * dl < 1) {\n    dl = 1;\n  }\n  var fl;\n  var gl;\n  if (!isNaN(this.longc)) {\n    //Central point and azimuth method\n\n    if (this.lat0 >= 0) {\n      fl = dl + Math.sqrt(dl * dl - 1);\n    }\n    else {\n      fl = dl - Math.sqrt(dl * dl - 1);\n    }\n    this.el = fl * Math.pow(t0, this.bl);\n    gl = 0.5 * (fl - 1 / fl);\n    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n  }\n  else {\n    //2 points method\n    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n    if (this.lat0 >= 0) {\n      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    else {\n      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    var hl = Math.pow(t1, this.bl);\n    var ll = Math.pow(t2, this.bl);\n    fl = this.el / hl;\n    gl = 0.5 * (fl - 1 / fl);\n    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n    var pl = (ll - hl) / (ll + hl);\n    var dlon12 = adjust_lon(this.long1 - this.long2);\n    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n    this.long0 = adjust_lon(this.long0);\n    var dlon10 = adjust_lon(this.long1 - this.long0);\n    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n    this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n  }\n\n  if (this.no_off) {\n    this.uc = 0;\n  }\n  else {\n    if (this.lat0 >= 0) {\n      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n    else {\n      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n  }\n\n}\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var dlon = adjust_lon(lon - this.long0);\n  var us, vs;\n  var con;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    if (lat > 0) {\n      con = -1;\n    }\n    else {\n      con = 1;\n    }\n    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n    us = -1 * con * HALF_PI * this.al / this.bl;\n  }\n  else {\n    var t = tsfnz(this.e, lat, Math.sin(lat));\n    var ql = this.el / Math.pow(t, this.bl);\n    var sl = 0.5 * (ql - 1 / ql);\n    var tl = 0.5 * (ql + 1 / ql);\n    var vl = Math.sin(this.bl * (dlon));\n    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n      vs = Number.POSITIVE_INFINITY;\n    }\n    else {\n      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n    }\n    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n      us = this.al * this.bl * (dlon);\n    }\n    else {\n      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n    }\n  }\n\n  if (this.no_rot) {\n    p.x = this.x0 + us;\n    p.y = this.y0 + vs;\n  }\n  else {\n\n    us -= this.uc;\n    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n  }\n  return p;\n}\n\nexport function inverse(p) {\n  var us, vs;\n  if (this.no_rot) {\n    vs = p.y - this.y0;\n    us = p.x - this.x0;\n  }\n  else {\n    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n    us += this.uc;\n  }\n  var qp = Math.exp(-1 * this.bl * vs / this.al);\n  var sp = 0.5 * (qp - 1 / qp);\n  var tp = 0.5 * (qp + 1 / qp);\n  var vp = Math.sin(this.bl * us / this.al);\n  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n  if (Math.abs(up - 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = HALF_PI;\n  }\n  else if (Math.abs(up + 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = -1 * HALF_PI;\n  }\n  else {\n    p.y = phi2z(this.e, ts);\n    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n  }\n  return p;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n}"],"sourceRoot":""}
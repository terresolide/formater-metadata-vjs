{"version":3,"sources":["webpack:///./src/capabilities-reader.js"],"names":["reader","$http","parser","regex","proxy","init","http","prox","DOMParser","RegExp","url","loadInfo","layer","options","metaId","callback","_this","this","href","test","search","encodeURIComponent","get","then","response","extract","body","str","root","parseFromString","ns","children","getAttribute","xlink","nsResolver","prefix","console","log","urlGetMap","getUrlGetMap","result","evaluate","name","XPathResult","ANY_TYPE","resultType","UNORDERED_NODE_ITERATOR_TYPE","ORDERED_NODE_ITERATOR_TYPE","layerXml","iterateNext","title","getTitle","id","ESPG","getESPG","format","getFormat","opacity","layers","legend","getLegend","resolver","STRING_TYPE","stringValue","NUMBER_TYPE","numberValue","getAbstract","getGeographicBoundingBox","src","module","exports"],"mappings":"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","file":"5.formater-metadata-vjs.js","sourcesContent":["/**\n * getCapabilities Reader\n */\n\nconst reader = {\n    $http: null,\n    parser: null,\n    regex: null,\n    proxy: null,\n    init (http,  prox) {\n      $http = http\n      parser = new DOMParser()\n      regex = new RegExp(prox.regex)\n      proxy = prox.url\n    },\n    loadInfo (layer, options, metaId, callback) {\n      var url = layer.href\n      if (regex.test(url)) {\n        search = proxy + '?url=' + encodeURIComponent(url)\n      }\n      $http.get(search)\n      .then(response => this.extract(response.body, layer, options, metaId, callback))\n    },\n    extract (str, layer, options, metaId, callback) {\n      var root = parser.parseFromString(str, 'text/xml')\n      var ns = root.children[0].getAttribute('xmlns')\n      var xlink = root.children[0].getAttribute('xmlns:xlink')\n      var nsResolver = function (prefix) {\n        switch(prefix) {\n          case 'xlink':\n            return xlink\n          default:\n            console.log(prefix)\n            return ns\n        }\n      }\n\n      var urlGetMap = this.getUrlGetMap(root, nsResolver)\n      if (urlGetMap === '') {\n        return null\n      }\n      options.url = urlGetMap\n      var result = null\n      result = root.evaluate('//ns:Layer[ns:Name=\"' + layer.name + '\"]', root, nsResolver, XPathResult.ANY_TYPE, null)\n      if (result.resultType !== XPathResult.UNORDERED_NODE_ITERATOR_TYPE && result.resultType !== XPathResult.ORDERED_NODE_ITERATOR_TYPE) {\n        return null\n      }\n      var layerXml = result.iterateNext();\n      if (layerXml === null) {\n        return null\n      }\n      layer.href = urlGetMap\n     // layer.legend = this.getLegend(root, layerXml, nsResolver)\n      layer.title = this.getTitle(root, layerXml, nsResolver)\n      layer.options = {\n        id: layer.id,\n        ESPG: this.getESPG(root, layerXml, nsResolver),\n        format: this.getFormat(root, nsResolver),\n        opacity: 0.5,\n        layers: layer.name,\n        legend: this.getLegend(root, layerXml, nsResolver)\n      }\n     // options.title = this.getTitle(root, layerXml, nsResolver)\n    //  options.legend = this.getLegend(root, layerXml, nsResolver)\n//      options.format = this.getFormat(root, nsResolver)\n//      options.ESPG = this.getESPG(root, layerXml, nsResolver)\n//      options.layers = layer.name\n//      options.id = layer.id\n      // search crs and legend and bbox\n      if (typeof callback !== 'undefined') {\n        callback(layer, metaId)\n      }\n    },\n    getUrlGetMap( root, resolver) {\n      var result = root.evaluate('//ns:Request/ns:GetMap/ns:DCPType/ns:HTTP/ns:Get/ns:OnlineResource/@xlink:href', root, resolver, XPathResult.STRING_TYPE, null)\n      return result.stringValue\n    },\n    getESPG (root, layerXml, resolver) {\n      // default leaflet CRS\n      var result = root.evaluate('count(./ns:CRS[text()=\"EPSG:3857\"])', layerXml, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n       return '3857'\n     }\n      var result = root.evaluate('count(./ns:CRS[text()=\"EPSG:4326\"])', layerXml, resolver, XPathResult.NUMBER_TYPE, null)\n      console.log(result)\n      if (result.numberValue > 0) {\n        return '4326'\n      }\n      var result = root.evaluate('count(./ns:CRS[text()=\"EPSG:3395\"])', layerXml, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return '3395'\n      } else {\n        return null\n      }\n    },\n    getFormat (root, resolver) {\n      var result = root.evaluate('count(//ns:Request/ns:GetMap[ns:Format=\"image/png\"])', root, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return 'image/png'\n      }\n      var result = root.evaluate('count(//ns:Request/ns:GetMap[ns:Format=\"image/jpeg\"])', root, resolver, XPathResult.NUMBER_TYPE, null)\n      if (result.numberValue > 0) {\n        return 'image/jpeg'\n      }\n      return null\n    },\n    getTitle (root, layerXml, resolver) {\n      var result = root.evaluate('./ns:Title/text()', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      return result.stringValue\n    },\n    getAbstract (root, layerXml, resolver) {\n      var result = root.evaluate('./ns:Abstract/text()', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      return result.stringValue\n    },\n    getGeographicBoundingBox (root, layerXml, resolver) {\n      \n    },\n    getLegend (root, layerXml, resolver) {\n      var result = root.evaluate('./ns:Style/ns:LegendURL/ns:OnlineResource/@xlink:href', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      var src = result.stringValue\n      var result = root.evaluate('./ns:Style/ns:Title', layerXml, resolver, XPathResult.STRING_TYPE, null)\n      var title = result.stringValue\n      console.log(src)\n      if (src !== '') {\n        return {src: src, title: title}\n      } else {\n        return null\n      }\n      \n    }\n}\nmodule.exports = reader"],"sourceRoot":""}
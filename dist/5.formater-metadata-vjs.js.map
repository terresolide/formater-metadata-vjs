{"version":3,"sources":["webpack:///./node_modules/proj4/lib/global.js","webpack:///./node_modules/proj4/lib/constants/values.js","webpack:///./node_modules/proj4/lib/constants/PrimeMeridian.js","webpack:///./node_modules/proj4/lib/constants/units.js","webpack:///./node_modules/proj4/lib/match.js","webpack:///./node_modules/proj4/lib/projString.js","webpack:///./node_modules/wkt-parser/parser.js","webpack:///./node_modules/wkt-parser/process.js","webpack:///./node_modules/wkt-parser/index.js","webpack:///./node_modules/proj4/lib/defs.js","webpack:///./node_modules/proj4/lib/parseCode.js","webpack:///./node_modules/proj4/lib/extend.js","webpack:///./node_modules/proj4/lib/common/msfnz.js","webpack:///./node_modules/proj4/lib/common/sign.js","webpack:///./node_modules/proj4/lib/common/adjust_lon.js","webpack:///./node_modules/proj4/lib/common/tsfnz.js","webpack:///./node_modules/proj4/lib/common/phi2z.js","webpack:///./node_modules/proj4/lib/projections/longlat.js","webpack:///./node_modules/proj4/lib/projections.js","webpack:///./node_modules/proj4/lib/projections/merc.js","webpack:///./node_modules/proj4/lib/constants/Ellipsoid.js","webpack:///./node_modules/proj4/lib/constants/Datum.js","webpack:///./node_modules/proj4/lib/datum.js","webpack:///./node_modules/proj4/lib/Proj.js","webpack:///./node_modules/proj4/lib/deriveConstants.js","webpack:///./node_modules/proj4/lib/datumUtils.js","webpack:///./node_modules/proj4/lib/datum_transform.js","webpack:///./node_modules/proj4/lib/adjust_axis.js","webpack:///./node_modules/proj4/lib/common/toPoint.js","webpack:///./node_modules/proj4/lib/checkSanity.js","webpack:///./node_modules/proj4/lib/transform.js","webpack:///./node_modules/proj4/lib/core.js","webpack:///./node_modules/mgrs/mgrs.js","webpack:///./node_modules/proj4/lib/Point.js","webpack:///./node_modules/proj4/lib/common/pj_enfn.js","webpack:///./node_modules/proj4/lib/common/pj_mlfn.js","webpack:///./node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack:///./node_modules/proj4/lib/projections/tmerc.js","webpack:///./node_modules/proj4/lib/common/sinh.js","webpack:///./node_modules/proj4/lib/common/hypot.js","webpack:///./node_modules/proj4/lib/common/gatg.js","webpack:///./node_modules/proj4/lib/common/clens_cmplx.js","webpack:///./node_modules/proj4/lib/common/cosh.js","webpack:///./node_modules/proj4/lib/projections/etmerc.js","webpack:///./node_modules/proj4/lib/common/clens.js","webpack:///./node_modules/proj4/lib/common/asinhy.js","webpack:///./node_modules/proj4/lib/common/log1py.js","webpack:///./node_modules/proj4/lib/projections/utm.js","webpack:///./node_modules/proj4/lib/common/adjust_zone.js","webpack:///./node_modules/proj4/lib/common/srat.js","webpack:///./node_modules/proj4/lib/projections/gauss.js","webpack:///./node_modules/proj4/lib/projections/sterea.js","webpack:///./node_modules/proj4/lib/projections/stere.js","webpack:///./node_modules/proj4/lib/projections/somerc.js","webpack:///./node_modules/proj4/lib/projections/omerc.js","webpack:///./node_modules/proj4/lib/projections/lcc.js","webpack:///./node_modules/proj4/lib/projections/krovak.js","webpack:///./node_modules/proj4/lib/common/mlfn.js","webpack:///./node_modules/proj4/lib/common/e0fn.js","webpack:///./node_modules/proj4/lib/common/e1fn.js","webpack:///./node_modules/proj4/lib/common/e2fn.js","webpack:///./node_modules/proj4/lib/common/e3fn.js","webpack:///./node_modules/proj4/lib/common/gN.js","webpack:///./node_modules/proj4/lib/common/adjust_lat.js","webpack:///./node_modules/proj4/lib/common/imlfn.js","webpack:///./node_modules/proj4/lib/projections/cass.js","webpack:///./node_modules/proj4/lib/common/qsfnz.js","webpack:///./node_modules/proj4/lib/projections/laea.js","webpack:///./node_modules/proj4/lib/common/asinz.js","webpack:///./node_modules/proj4/lib/projections/aea.js","webpack:///./node_modules/proj4/lib/projections/gnom.js","webpack:///./node_modules/proj4/lib/projections/cea.js","webpack:///./node_modules/proj4/lib/common/iqsfnz.js","webpack:///./node_modules/proj4/lib/projections/eqc.js","webpack:///./node_modules/proj4/lib/projections/poly.js","webpack:///./node_modules/proj4/lib/projections/nzmg.js","webpack:///./node_modules/proj4/lib/projections/mill.js","webpack:///./node_modules/proj4/lib/projections/sinu.js","webpack:///./node_modules/proj4/lib/projections/moll.js","webpack:///./node_modules/proj4/lib/projections/eqdc.js","webpack:///./node_modules/proj4/lib/projections/vandg.js","webpack:///./node_modules/proj4/lib/projections/aeqd.js","webpack:///./node_modules/proj4/lib/projections/ortho.js","webpack:///./node_modules/proj4/lib/projections/qsc.js","webpack:///./node_modules/proj4/lib/projections/robin.js","webpack:///./node_modules/proj4/lib/projections/geocent.js","webpack:///./node_modules/proj4/lib/index.js","webpack:///./node_modules/proj4/projs.js"],"names":["PJD_3PARAM","PJD_7PARAM","SEC_TO_RAD","HALF_PI","Math","PI","SIXTH","RA4","RA6","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","PrimeMeridian_exports","greenwich","lisbon","paris","bogota","madrid","rome","bern","jakarta","ferro","brussels","stockholm","athens","oslo","units","ft","to_meter","us-ft","ignoredChar","match","obj","key","testkey","keys","Object","lkey","toLowerCase","replace","i","length","projString","defData","paramName","paramVal","paramOutname","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","unit","from_greenwich","pm","nadgrids","datumCode","axis","indexOf","substr","NEUTRAL","whitespace","latin","keyword","endThings","digets","Parser","text","Error","this","level","place","root","stack","currentObject","state","mapit","value","Array","isArray","unshift","thing","out","newObj","item","sExpr","shift","name","convert","prototype","readCharicter","char","test","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","output","wkt_parser_D2R","d2r","input","wkt_parser","wkt","lisp","txt","parser","type","projName","local","PROJECTION","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","slice","sphere","ellps","TOWGS84","isFinite","forEach","outName","inName","defs","that","arguments","def","charAt","apply","EPSG","ESRI","IAU2000","console","log","WGS84","GOOGLE","lib_defs","codeWords","codes","parseCode","code","some","auth","maybeProjStr","ext","extend","destination","source","property","msfnz","eccent","sinphi","cosphi","con","sqrt","sign","x","adjust_lon","abs","tsfnz","phi","com","pow","tan","phi2z","ts","dphi","eccnth","atan","sin","identity","pt","projs","init","es","e","cos","forward","y","lon","lat","inverse","exp","names","projections_names","projStore","add","len","n","projections","start","get","Ellipsoid_exports","MERIT","ellipseName","SGS85","GRS80","IAU76","airy","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","Datum_exports","wgs84","ellipse","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","lib_datum","ep2","datum_type","Projection","srsCode","callback","error","json","ourProj","datumDef","sphere_","ecc","a2","b2","datumObj","Proj","geodeticToGeocentric","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","X","Y","Z","atan2","checkParams","datum_transform","dest","point","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","x_tmp","y_tmp","z_tmp","adjust_axis","crs","denorm","t","xin","yin","zin","toPoint","array","m","checkSanity","checkCoord","num","Number","TypeError","transform","core_wgs84","transformer","from","to","coords","transformedArray","NaN","concat","splice","checkProj","oProj","core","fromProj","toProj","coord","single","NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","mgrs_A","I","O","mgrs_V","mgrs_Z","mgrs","mgrs_forward","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","mgrs_toPoint","ll","accuracy","utm","seasting","easting","snorthing","northing","zoneNumber","zoneLetter","setParm","get100kSetForZone","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","String","fromCharCode","floor","N","T","C","A","LongOriginRad","ZoneNumber","Lat","Long","LatRad","degToRad","LongRad","UTMEasting","UTMNorthing","round","LetterDesignator","LLtoUTM","deg","radToDeg","rad","N1","T1","C1","R1","D","LongOrigin","mu","phi1Rad","e1","result","topRight","mgrsString","testChar","hunK","sb","substring","set","east100k","curCol","eastingValue","rewindMarker","north100k","curRow","northingValue","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","Point","warn","fromMGRS","mgrsStr","toMGRS","lib_Point","C08","pj_enfn","en","pj_mlfn","sphi","cphi","pj_inv_mlfn","arg","s","tmerc","ml0","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","tan_phi","d","ds","f","g","temp","h","asin","sinh","r","hypot","max","min","gatg","pp","B","cos_2B","h1","h2","clens_cmplx","arg_r","arg_i","hr2","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","j","hr","hi1","hr1","hi","etmerc","cgb","cbg","utg","gtu","np","Qn","Zb","clens","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","asinhy","tmp","adjust_zone","dependsOn","srat","esinp","gauss","rc","phic0","ratexp","K","sterea","sinc0","cosc0","R2","title","sinc","cosc","cosl","rho","stere","coslat0","sinlat0","isNaN","cons","ms1","X0","ssfn_","cosX0","sinX0","sinX","cosX","rh","sinlat","coslat","dlon","ce","Chi","phit","eccen","somerc","phy0","lambda0","sinPhy0","semiMajorAxis","flattening","e2","R","b0","k1","k2","k3","Sa1","Sa2","S","rotI","rotB","lambda","phy","prevPhy","iteration","omerc","no_off","no_rot","bl","fl","gl","t0","dl","t1","t2","el","hl","jl","pl","dlon12","dlon10","gamma0","uc","us","vs","ql","sl","tl","vl","ul","POSITIVE_INFINITY","qp","sp","tp","vp","up","lcc","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","rh1","theta","krovak","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","gfi","u","deltav","eps","ro","czech","fi1","ok","mlfn","e0","e3","e0fn","e1fn","e2fn","e3fn","gN","adjust_lat","imlfn","cass","lam","nl","asq","cl","dd","ml1","phi1","nl1","rl1","tl1","dsq","qsfnz","laea","mode","S_POLE","N_POLE","EQUIT","OBLIQ","mmf","apa","APA","rq","xmf","ymf","sinb1","cosb1","sinph0","cosph0","coslam","sinlam","q","sinb","cosb","phi0","cCe","sCe","ab","cosz","sinz","beta","asinz","aea","sin_po","cos_po","qs1","qs2","t3","qs0","ns0","qs","phi1z","eccnts","gnom","sin_p14","cos_p14","infinity_dist","coslon","cea","iqsfnz","eqc","dlat","poly","tanphi","mln","mlnp","ma","nzmg","B_re","B_im","C_re","C_im","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","z_n_im1","delta_x","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","mill","sinu","C_y","C_x","V","moll","delta_theta","eqdc","ml2","vandg","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","m1","th1","aeqd","sin_p12","cos_p12","Mlp","Ml","Nl1","Nl","psi","Az","G","H","GH","Hs","kp","cos_c","s2","s3","s4","cosAz","Ee","F","ortho","FACE_ENUM","AREA_ENUM","AREA_0","AREA_1","AREA_2","AREA_3","qsc_fwd_equat_face_theta","area","qsc_shift_lon_origin","offset","slon","qsc","face","one_minus_f","one_minus_f_squared","xy","sinlon","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","COEFS_X","COEFS_Y","RC1","poly3_val","coefs","robin","NODES","f_df","max_err","iters","upd","poly3_der","geocent","defaultDatum","version","proj4","__webpack_exports__"],"mappings":"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","file":"5.formater-metadata-vjs.js","sourcesContent":["export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['false_easting', 'False_Easting'],\n    ['false_northing', 'False_Northing'],\n    ['central_meridian', 'Central_Meridian'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\n var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import {PJD_3PARAM, PJD_7PARAM, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      t = 'x';\n    }\n    else if (i === 1) {\n      v = yin;\n      t = 'y';\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function (coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (this.es === undefined || this.es <= 0) {\n    throw new Error('incorrect elliptical usage');\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {EPSLN, HALF_PI, FORTPI} from '../constants/values';\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {\n  this.no_off = this.no_off || false;\n  this.no_rot = this.no_rot || false;\n\n  if (isNaN(this.k0)) {\n    this.k0 = 1;\n  }\n  var sinlat = Math.sin(this.lat0);\n  var coslat = Math.cos(this.lat0);\n  var con = this.e * sinlat;\n\n  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n  var t0 = tsfnz(this.e, this.lat0, sinlat);\n  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n  if (dl * dl < 1) {\n    dl = 1;\n  }\n  var fl;\n  var gl;\n  if (!isNaN(this.longc)) {\n    //Central point and azimuth method\n\n    if (this.lat0 >= 0) {\n      fl = dl + Math.sqrt(dl * dl - 1);\n    }\n    else {\n      fl = dl - Math.sqrt(dl * dl - 1);\n    }\n    this.el = fl * Math.pow(t0, this.bl);\n    gl = 0.5 * (fl - 1 / fl);\n    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n  }\n  else {\n    //2 points method\n    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n    if (this.lat0 >= 0) {\n      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    else {\n      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    var hl = Math.pow(t1, this.bl);\n    var ll = Math.pow(t2, this.bl);\n    fl = this.el / hl;\n    gl = 0.5 * (fl - 1 / fl);\n    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n    var pl = (ll - hl) / (ll + hl);\n    var dlon12 = adjust_lon(this.long1 - this.long2);\n    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n    this.long0 = adjust_lon(this.long0);\n    var dlon10 = adjust_lon(this.long1 - this.long0);\n    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n    this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n  }\n\n  if (this.no_off) {\n    this.uc = 0;\n  }\n  else {\n    if (this.lat0 >= 0) {\n      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n    else {\n      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n  }\n\n}\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var dlon = adjust_lon(lon - this.long0);\n  var us, vs;\n  var con;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    if (lat > 0) {\n      con = -1;\n    }\n    else {\n      con = 1;\n    }\n    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n    us = -1 * con * HALF_PI * this.al / this.bl;\n  }\n  else {\n    var t = tsfnz(this.e, lat, Math.sin(lat));\n    var ql = this.el / Math.pow(t, this.bl);\n    var sl = 0.5 * (ql - 1 / ql);\n    var tl = 0.5 * (ql + 1 / ql);\n    var vl = Math.sin(this.bl * (dlon));\n    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n      vs = Number.POSITIVE_INFINITY;\n    }\n    else {\n      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n    }\n    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n      us = this.al * this.bl * (dlon);\n    }\n    else {\n      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n    }\n  }\n\n  if (this.no_rot) {\n    p.x = this.x0 + us;\n    p.y = this.y0 + vs;\n  }\n  else {\n\n    us -= this.uc;\n    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n  }\n  return p;\n}\n\nexport function inverse(p) {\n  var us, vs;\n  if (this.no_rot) {\n    vs = p.y - this.y0;\n    us = p.x - this.x0;\n  }\n  else {\n    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n    us += this.uc;\n  }\n  var qp = Math.exp(-1 * this.bl * vs / this.al);\n  var sp = 0.5 * (qp - 1 / qp);\n  var tp = 0.5 * (qp + 1 / qp);\n  var vp = Math.sin(this.bl * us / this.al);\n  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n  if (Math.abs(up - 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = HALF_PI;\n  }\n  else if (Math.abs(up + 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = -1 * HALF_PI;\n  }\n  else {\n    p.y = phi2z(this.e, ts);\n    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n  }\n  return p;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.phi0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c / Math.sin(c);\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n}"],"sourceRoot":""}
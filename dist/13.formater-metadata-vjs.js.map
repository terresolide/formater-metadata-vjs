{"version":3,"sources":["webpack:///./src/components/formater-opensearch.vue?db76","webpack:///./src/components/formater-api-requester.vue?2f18","webpack:///src/components/formater-api-requester.vue","webpack:///./src/components/formater-opensearch.vue?9064","webpack:///src/components/formater-opensearch.vue","webpack:///./src/components/formater-api-requester.vue","webpack:///./src/components/formater-api-requester.vue?dea1","webpack:///./src/components/formater-opensearch.vue"],"names":["components_formater_api_requestervue_type_script_lang_js_","name","props","api","type","String","default","depth","Number","watch","$route","newroute","old","console","log","this","getRecords","data","headers","Accept","Accept-Language","$store","state","lang","first","dimensions","parameters","closeMetadataListener","resetListener","facet","credentials","created","destroyed","mounted","methods","initParameters","index","maxRecords","size","nbRecord","commit","prepareRequest","requestApi","event","Object","assign","query","mapParameters","specificParameters","others","mappingParameters","mapping","renameProperty","from","to","find","obj","_this","self","url","indexOf","keys","map","prop","join","$emit","$http","get","then","response","treatmentGeojson","body","treatmentError","status","metadatas","features","forEach","feature","properties","id","mapToGeonetwork","push","geometry","length","description","fill","metadata","fromOs","productIdentifier","startDate","completionDate","updated","published","produced","quicklook","images","license","legalConstraints","licenseId","osParameters","services","browse","layers","flatsimLayer","layer","href","checked","download","exportLinks","links","i","json","splice","xml","contacts","resource","organisationName","responsible","Array","keywords","keyword","CustomEvent","detail","document","dispatchEvent","components_formater_opensearchvue_type_script_lang_js_","components","FormaterApiRequester","componentNormalizer","_h","$createElement","_self","_c","describe","uuid","service","newvalue","domain","filter","param","load","extractDescribeParameters","loadWithProxy","_this2","proxy","encodeURIComponent","extractParameter","parameterNode","specName","appName","object","value","key","predefined","getAttribute","title","pattern","min","max","nodes","getElementsByTagName","options","k","parametersString","DOMParser","parseFromString","firstChild","childNodes","node","tagName","toLowerCase","extract","match","regexList","excluedRegex","some","str","RegExp","test","formater_opensearch_component","attrs","_e","__webpack_exports__"],"mappings":"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","file":"13.formater-metadata-vjs.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.api)?_c('formater-api-requester',{attrs:{\"api\":_vm.api,\"depth\":_vm.depth}}):_vm._e()}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-api-requester.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-api-requester.vue?vue&type=script&lang=js&\"","/**\n * use geonetwork q-search service \n * @see https://geonetwork-opensource.org/manuals/trunk/eng/users/api/q-search.html\n * \n * use opensearch api with extension geo, time, and eo\n * @see http://www.opensearch.org/Home\n * \n */\n \n<template></template>\n<script>\n\n\nexport default {\n  name: 'FormaterApiRequester',\n  props: {\n    api: {\n      type: String,\n      default: null\n    },\n    depth: {\n      type: Number,\n      default: 1\n    }\n  },\n  watch: {\n    $route (newroute, old) {\n      console.log(newroute)\n      this.getRecords(newroute)\n      \n    }\n  },\n  data() {\n    return {\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Accept-Language': this.$store.state.lang === 'fr' ? 'fre,eng': 'eng,fre'\n      },\n      first: true,\n      dimensions: [],\n      parameters: {},\n//       changePageListener:null,\n//       temporalChangedListener: null,\n//       spatialChangedListener: null,\n//       dimensionChangedListener: null,\n//       textChangedListener: null,\n//       selectChangedListener: null,\n      closeMetadataListener: null,\n      // listen a global reset event\n      resetListener: null,\n      facet: [],\n      type: 'opensearch',\n      credentials: {}\n     }\n  },\n  created () {\n    \n    console.log('CREATE API REQUESTER')\n    this.getRecords(this.$route)\n  },\n  destroyed () {\n },\n  mounted () {\n//     this.facet.facetFormaterFre = []\n//     this.facet.facetFormaterFre.push('https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fsolid_earth/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fgeothermal/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fgeothermal-geothermal_temperature')\n//     this.facet.facetFormaterFre.push( 'https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fsolid_earth/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fnon_solid/https%3A%2F%2Fw3id.org%2Fformater%2Fvariable%2Fnon_solid-hydrogen_gas')\n   \n    // url=\"http://demo.formater/geonetwork/srv/fre/qi?_content_type=json&bucket=2365825987452666&fast=index&from=1&to=41\"\n  },\n  methods: {\n    initParameters () {\n      \n        this.parameters = {\n          index: 1,\n          maxRecords: this.$store.state.size.nbRecord\n        }\n    }, \n    getRecords (newroute) {\n      \n         console.log('GET RECORDS')\n     this.$store.commit('searchingChange', true)\n\n\n      this.prepareRequest(newroute)\n      this.requestApi(event)\n    },\n \n   prepareRequest(newroute) {\n      this.initParameters()\n           \n      this.parameters = Object.assign(this.parameters, newroute.query)\n     \n      this.mapParameters()\n\n    },\n    mapParameters() {\n      // transform the name of parameter from this application to the opensearch api for the predefined parameter\n      // or test if it is an opensearch parameter\n      // paramaters specific to api opensearch\n      var specificParameters = this.$store.state.parameters.others\n      // parameters mapping with our app parameters\n      var mappingParameters = this.$store.state.parameters.mapping\n      // change \n      this.parameters.renameProperty('bbox', mappingParameters['box'])\n      if (this.parameters.from) {\n        this.parameters[mappingParameters['index']] = this.parameters.from\n        if (this.parameters.to) {\n          this.parameters[mappingParameters['maxRecords']] = this.parameters.to - this.parameters.from + 1\n        }\n      }\n      for(var name in this.parameters){\n        \n        if (typeof mappingParameters[name] !== 'undefined') {\n          this.parameters.renameProperty(name, mappingParameters[name])\n        } else  {\n          var isSpecific = specificParameters.find(function (obj) {\n            if (obj.name === name) {\n              return true\n            }\n          })\n          if (!isSpecific) {\n            delete this.parameters[name]\n          }\n        } \n      }\n    },\n \n  \n    requestApi (depth) {\n\t\t  if (!this.api) {\n\t\t    this.$store.commit('searchingChange', false)\n\t\t    return\n\t\t  }\n      // var depth = (typeof this.parameters.depth != 'undefined') ? this.parameters.depth : this.depth\n      var self = this\n      var url = this.api + (this.api.indexOf('?') > 0 ? '&' :'?');\n      // register parameters value\n       url += Object.keys(this.parameters).map(function (prop) {\n        return prop + '=' + self.parameters[prop]\n      }).join('&');\n      this.$emit('registerValues', {depth: depth, parameters: this.parameters})\n     // this.$store.commit('addValueToParameters', this.parameters)\n      this.$http.get(url).then(\n          response => {   this.treatmentGeojson(response.body, depth);},\n          response => { this.treatmentError(response, url); })\n    },\n    treatmentError (response, url) {\n      switch(response.status) {\n      case 0:\n        this.$store.commit('setError', 'Maybe CORS ERROR, try with proxy')\n        break;\n      case 403:\n        this.$store.commit('setError', 'SERVER RESPONSE FOR ' + url + ' : ACCESS DENIED')\n        break;\n      case 404:\n        this.$store.commit('setError', 'SERVER RESPONSE FOR ' + url + ' : PAGE NOT FOUND')\n        break;\n      default:\n        this.$store.commit('setError', 'UNKNOWN ERROR FOR ' + url)\n      }\n      this.$store.commit('searchingChange', false)\n    },\n    treatmentGeojson (data, depth) {\n      var metadatas = {}\n      var self = this\n      var features = []\n      data.features.forEach( function (feature) {\n        feature.properties.id = feature.id\n        metadatas[feature.id] =  self.mapToGeonetwork(feature.properties)\n        features.push({type: feature.type, id: feature.id, geometry: feature.geometry})\n       \n      })\n      if (data.features.length === 0) {\n        metadatas = {}\n      }\n      if (data.properties) {\n        var properties = data.properties\n      } else {\n        var properties = data.description\n      }\n\n      this.fill({ type: 'opensearch', properties: data.properties, features: features, metadata:metadatas}, depth)\n      this.$store.commit('searchingChange', false)\n    },\n   \n    // remove groupOwner if only one group choose in app parameters\n//     treatmentDimension (dimensions) {\n//       if (this.$store.state.group.length === 1) {\n//         if (!dimensions) {\n//           dimensions = []\n//         } else if (!Array.isArray(dimensions)) {\n//           dimensions = [dimensions]\n//         }\n//         var find = dimensions.findIndex(function (dimension) {\n//           return dimension['@name'] === 'groupOwner'\n//         })\n//         if (find >= 0) {\n//           dimensions.splice(find, 1)\n//         }\n//       }\n//     },\n//     searchGnStep2Parameters (dimension) {\n//       if (this.first) {\n//         // register dimension in store\n//         if (this.depth === 0) {\n//           this.$store.commit('gnParametersChange', {step:1, dimension: dimension})\n//         }\n//         // this.$store.commit('gnParametersChange', {step:2, dimension:[]})\n//         // search summary for all record (including child dataset) for step 2\n//         if (this.$store.state.summaryType.step1 !== this.$store.state.summaryType.step2) {\n          \n//           // var depth = (typeof this.parameters.depth != 'undefined') ? this.parameters.depth : this.depth\n//           var headers =  {\n//               'Accept': 'application/json, text/plain, */*',\n//               'Accept-Language': this.$i18n.locale === 'fr' ? 'fre': 'eng'\n//            }\n//           var parameters = {\n//               _content_type: 'json',\n//               from:1,\n//               to: 9,\n//               type: 'dataset+or+series+or+publications',\n//               resultType: this.$store.state.summaryType.step2\n//           }\n//           var url = this.srv + 'q?' + Object.keys(parameters).map(function (prop) {\n//             return prop + '=' + parameters[prop]\n//           }).join('&');\n//           this.$http.get(url, {headers: headers}).then(\n//             response => {  this.addGnParameters(response.body);}\n//           )\n//           this.first = false\n//         }\n//       }\n//     },\n//     addGnParameters(data) {\n//       this.$store.commit('gnParametersChange', {step:2, dimension:data.summary.dimension})\n//     },\n//     updateGeonetworkContacts (data) {\n//       data.responsibleParty.forEach( function (contact)  {\n//           var fields = contact.split('|');\n//           if (fields[1] === 'metadata' || fields[1] === 'metadonnées') {\n//            if (_this.contacts.metadata[fields[0]]){\n//              _this.contacts.metadata[fields[0]].push(fields)\n//            } else {\n//              _this.contacts.metadata[fields[0]] = [fields]\n//            }\n//           }else{\n//             if (_this.contacts.resource[fields[0]]){\n//                _this.contacts.resource[fields[0]].push(fields)\n//             } else {\n//                _this.contacts.resource[fields[0]] = [fields]\n//             }\n//           }\n                \n//       })\n//     },\n    mapToGeonetwork (properties) {\n      var properties = Object.assign({}, properties)\n      properties.fromOs = true\n      if (properties.productIdentifier) {\n        properties.renameProperty('productIdentifier', 'identifier')\n      }\n      if (properties.startDate) {\n        properties.renameProperty('startDate', 'tempExtentBegin')\n      }\n      if (properties.completionDate) {\n        properties.renameProperty('completionDate', 'tempExtentEnd')\n      }\n      if (properties.updated) {\n        properties.renameProperty('updated', 'revisionDate')\n      }\n      if (properties.published) {\n        properties.renameProperty('published', 'publicationDate')\n      }\n      if (properties.produced) {\n        properties.renameProperty('produced', 'creationDate')\n      }\n      if (!properties.type) {\n        properties.type = 'dataset'\n      }\n      if (properties.quicklook) {\n        properties.images = [['', properties.quicklook, '']]\n        delete properties.quicklook\n      }\n      if (properties.license) {\n        properties.legalConstraints = [properties.license.licenseId]\n        delete properties.license\n      }\n      properties.osParameters = []\n      properties.mapping = []\n      if (properties.services) {\n        // @todo cas très très particulier de flatsim\n        if(properties.services.browse && properties.services.browse.layers) {\n          properties.layers = []\n          properties.services.browse.layers.forEach(function (flatsimLayer, index) {\n            var type =  flatsimLayer.type\n            var layer = {\n                id: properties.id + '_' + index,\n                name: flatsimLayer.name,\n                description:  flatsimLayer.name,\n                href: flatsimLayer.url,\n                type: flatsimLayer.type,\n                checked: false\n            }\n            properties.layers.push(layer)\n          })\n        }\n        if(properties.services.download && properties.services.download.url) {\n          if (!properties.download) {\n            properties.download = []\n          }\n          properties.download.push(properties.services.download)\n          \n        }\n        delete properties.services\n      }\n      if( !properties.exportLinks) {\n        properties.exportLinks = {}\n      }\n      // @todo Flatsim cas particulier des LIENS D'EXPORT qui se trouve dans link\n      if (properties.links) {\n        var i = properties.links.length\n        while (i--) {\n          if (properties.links[i].type === 'application/json' && !properties.exportLinks.json) {\n            properties.exportLinks.json = properties.links[i].href\n            properties.links.splice(i,1)\n          }\n          if (properties.links[i].type === 'application/xml' && !properties.exportLinks.xml) {\n            properties.exportLinks.xml = properties.links[i].href\n            properties.links.splice(i,1)\n          }\n        }\n        delete properties.links\n      }\n\n      if (!properties.contacts) {\n        properties.contacts = {metadata: {}, resource: {}}\n        if (properties.organisationName) {\n          if (typeof properties.organisationName === 'string') {\n            var responsible = new Array(10)\n            responsible[0] = 'Point of contact'\n            responsible[2] = properties.organisationName\n            properties.contacts.metadata['Point of contact'] = [responsible]\n            delete properties.organisationName\n          }\n        }\n      }\n     /* if (properties.keywords) {\n        properties.keywordGroup = {}\n        properties.keywords.forEach(function (keyword) {\n          if (!properties.keywordGroup[keyword.type]) {\n            properties.keywordGroup[keyword.type] = [{value: keyword.name}]\n          } else {\n            properties.keywordGroup[keyword.type].push({value: keyword.name})\n          }\n        })\n        delete properties.keywords\n      }*/\n      if (properties.keywords) {\n        properties.keyword = []\n        properties.keywords.forEach(function (keyword) {\n          properties.keyword.push(keyword.name)\n        })\n        delete properties.keywords\n      }\n      return properties\n    },\n    // @todo DEPLACER DANS FORM VOIR MÊME DANS formater-dimension-block/ formater-facet-block!!\n//     prepareFacet (e) {\n//       var facet = ''\n     \n//       for(var key in e.detail.facet) {\n//         if (e.detail.facet[key].length > 0) {\n//           if (facet === '') {\n//             facet = key +'/' + e.detail.facet[key]\n//           } else {\n//             facet += '&' + key + '/' + e.detail.facet[key]\n//           }\n//         }\n//       }\n//       if (facet !== '') {\n//        e.detail['facet.q'] = encodeURIComponent(facet)\n//        delete e.detail.facet\n//       }\n//       return e;\n//     },\n    fill (data, depth) {\n      data.depth = this.depth\n      console.log('DISPATHC mt:metadataListEvent')\n      var event = new CustomEvent('fmt:metadataListEvent', {detail:  data})\n      document.dispatchEvent(event)\n    },\n//     handleReset () {\n//       var event = new CustomEvent('aerisResetEvent', {detail: {}})\n//       document.dispatchEvent(event)\n//       this.getRecords({detail: {depth:event.detail.depth}})\n//     },\n//     changePage (event) {\n//       this.getRecords(event)\n//     },\n//     changeSearch (event) {\n//       this.parameters.any = event.target.value\n//       this.getRecords()\n//     }\n  }\n}\n</script>\n","import mod from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-opensearch.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./formater-opensearch.vue?vue&type=script&lang=js&\"","/**\n * Tools to read the opensearch describe xml and extract the api and parameters \n * \n * @author epointal\n *\n **/\n \n<template>\n<formater-api-requester v-if=\"api\" :api=\"api\" :depth=\"depth\"></formater-api-requester>\n</template>\n<script>\nimport FormaterApiRequester from '@/components/formater-api-requester.vue'\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\nexport default {\n  name: 'FormaterOpensearch',\n  components: {\n    FormaterApiRequester\n  },\n  props: {\n    describe: {\n      type: String,\n      default: null\n    },\n    uuid: {\n      type: String,\n      default: null\n    },\n    depth: {\n      type: Number,\n      default: null\n    },\n    service: {\n      type: Object,\n      default: null\n    }\n  },\n  watch: {\n    service (newvalue) {\n      if (newvalue.domain.indexOf('flatsim') >= 0) {\n        this.osParameters = this.osParameters.filter(param => param.name !== 'processingLevel')\n        this.$emit('parametersChange', {api: this.api, parameters:this.osParameters, mapping: this.mappingParameters})\n      }\n    }\n  },\n  created () {\n    // this.searchEventListener = this.handleSearch.bind(this) \n  \t// document.addEventListener('aerisSearchEvent', this.searchEventListener);\n    this.load()\n  },\n  mounted () {\n\n  },\n  destroyed () {\n//     document.removeEventListener('aerisSearchEvent', this.searchEventListener);\n//     this.searchEventListener = null\n  },\n  data () {\n    return {\n     // searchEventListener: null,\n      api: null,\n      // associative array of: parameter name in this application => name in the opensearch api\n      // for the predefined parameters like box, temporalExtent, and paging (common for all api)\n      mappingParameters: [],\n      // list of others specific opensearch api parameters \n      // { name, title, pattern, min, max, options}\n      osParameters: []\n    }\n  },\n  methods: {\n     load() {\n       this.$http.get(this.describe)\n       .then(\n           response => { this.extractDescribeParameters(response.body);},\n           response => { this.loadWithProxy()}\n        )\n    },\n    loadWithProxy() {\n      if (this.$store.state.proxy.url) {\n\t      var url = this.$store.state.proxy.url + '?url=' + encodeURIComponent(this.describe)\n\t      this.$http.get(url)\n\t      .then(\n\t          response => { this.extractDescribeParameters(response.body);},\n\t          response => { this.$emit('failed');}\n\t       )\n      } else {\n        console.log('CAN NOT GET ' + this.describe)\n        this.$emit('failed')\n      }\n    },\n    extractParameter (parameterNode, specName) {\n      var listPredefined = this.$store.state.parameters.predefined\n      // name in this application\n      var appName = getKeyByValue(listPredefined, specName)\n      // name in the opensearch api\n      var name = parameterNode.getAttribute('name')\n      if (typeof appName !== 'undefined') {\n        this.mappingParameters[appName] = name\n        return\n      }\n      \n      var obj= {\n          name: name,\n          title: parameterNode.getAttribute('title')\n      }\n      // particular cas\n      switch(name) {\n//         case 'relativeOrbitNumber':\n//           obj.title = obj.title || 'Ex: 123'\n//           break;\n        case 'processingLevel':\n          if (this.service && this.service.domain.indexOf('flatsim')>= 0) {\n             return;\n          }\n          break;\n      }\n      \n      var pattern = parameterNode.getAttribute('pattern')\n      if (pattern) {\n        obj = Object.assign(obj, {pattern: pattern})\n      }\n      var min = parameterNode.getAttribute('minInclusive')\n      if (min) {\n        obj= Object.assign(obj, {min: min})\n      }\n      var max = parameterNode.getAttribute('maxInclusive')\n      if (max) {\n        obj = Object.assign(obj, {max: max})\n      }\n      var nodes = parameterNode.getElementsByTagName('parameters:Options')\n      if (nodes) {\n        var options= []\n        for(var k=0; k < nodes.length; k++) {\n          options.push(nodes[k].getAttribute('value'))\n        }\n        if (options.length > 0)\n        obj = Object.assign(obj, {options: options})\n      }\n//      if (self.removedFields.indexOf(name) >=0) {\n        \n//       }else if (name.toLowerCase() === 'platform') {\n//         this.platform = obj\n//       } else if (name.toLowerCase() === 'q'){\n//         this.hasQ = true\n//      } else\n//         if (this.geographic.indexOf(name) >=0) {\n//         this.geoParameters.push(obj)\n//       } else if (this.paging.indexOf(name) >= 0) {\n//          this.pagingParameters.push(obj)\n//       }else \n      if (!obj.options || obj.options.length > 1) {\n        this.osParameters.push(obj)\n      }\n    },\n    extractDescribeParameters(parametersString) {\n      var parser = new DOMParser()\n      var xml = parser.parseFromString(parametersString, 'text/xml')\n      var urls = xml.firstChild.childNodes\n      var url = null\n      // loop to find the good url\n      urls.forEach(function (node) {\n         if (node.tagName && node.tagName.toLowerCase() === 'url' && node.getAttribute('type').indexOf('json') >= 0) {\n           var template = node.getAttribute('template')\n           var extract = template.match(/^(.*(?:(?:search.json\\?)|(?:\\?format=FLATSIM))).*$/)\n           if( extract && extract[1] && extract[1] != ''){\n               url = node;\n           }\n         }\n      })\n      if (!url)  {\n        return\n      }\n      var template = url.getAttribute('template')\n      var extract = template.match(/^(.*(?:(?:search.json\\?)|(?:\\?format=FLATSIM))).*$/)\n      if (!extract[1]) {\n        return\n      } else {\n        this.api = extract[1]\n      }\n      var parameters = url.getElementsByTagName('parameters:Parameter')\n      var self = this\n      var regexList = this.$store.state.parameters.excluedRegex\n      // loop on the parameters node\n      for(var i=0; i < parameters.length; i++){\n        var specName = parameters[i].getAttribute('value')\n        // search if the parameter is exclued (@see list in store/index.js)\n        var isExclued = regexList.some(function(str) {\n          var rx = new RegExp(str)\n          return rx.test(specName)\n        })\n        if (!isExclued) {\n          var obj = self.extractParameter(parameters[i] , specName)\n        }\n        \n      }\n     // this.recordService()\n      this.$emit('parametersChange', {api: this.api, parameters:this.osParameters, mapping: this.mappingParameters})\n      \n    },\n    // record this service\n//     recordService() {\n//       // only if authenticate user\n//      // if (this.$store && this.$store.getters['user/email']) {\n//         this.$store.commit('services/add', this.api)\n//       // }\n//     },\n//     handleSearch(e) {\n//       if (this.api && e.detail.parentUuid === this.uuid) {\n//         e.detail.api = this.api\n//       }\n//     }\n  }\n}\n\n</script>\n\n","import { render, staticRenderFns } from \"./formater-api-requester.vue?vue&type=template&id=3027cf6e&\"\nimport script from \"./formater-api-requester.vue?vue&type=script&lang=js&\"\nexport * from \"./formater-api-requester.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./formater-opensearch.vue?vue&type=template&id=40710c28&\"\nimport script from \"./formater-opensearch.vue?vue&type=script&lang=js&\"\nexport * from \"./formater-opensearch.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}